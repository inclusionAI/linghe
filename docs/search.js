window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "linghe", "modulename": "linghe", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "linghe.facade", "modulename": "linghe.facade", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "linghe.facade.add", "modulename": "linghe.facade.add", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.facade.add.InplaceAddFunction", "modulename": "linghe.facade.add", "qualname": "InplaceAddFunction", "kind": "class", "doc": "<p>Base class to create custom <code>autograd.Function</code>.</p>\n\n<p>To create a custom <code>autograd.Function</code>, subclass this class and implement\nthe :meth:<code>forward</code> and :meth:<code>backward</code> static methods. Then, to use your custom\nop in the forward pass, call the class method <code>apply</code>. Do not call\n:meth:<code>forward</code> directly.</p>\n\n<p>To ensure correctness and best performance, make sure you are calling the\ncorrect methods on <code>ctx</code> and validating your backward function using\n:func:<code>torch.autograd.gradcheck</code>.</p>\n\n<p>See :ref:<code>extending-autograd</code> for more details on how to use this class.</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; # xdoctest: +REQUIRES(env:TORCH_DOCTEST_AUTOGRAD)\n&gt;&gt;&gt; class Exp(Function):\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def forward(ctx, i):\n&gt;&gt;&gt;         result = i.exp()\n&gt;&gt;&gt;         ctx.save_for_backward(result)\n&gt;&gt;&gt;         return result\n&gt;&gt;&gt;\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def backward(ctx, grad_output):\n&gt;&gt;&gt;         result, = ctx.saved_tensors\n&gt;&gt;&gt;         return grad_output * result\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Use it by calling the apply method:\n&gt;&gt;&gt; # xdoctest: +SKIP\n&gt;&gt;&gt; output = Exp.apply(input)\n</code></pre>\n", "bases": "torch.autograd.function.Function"}, {"fullname": "linghe.facade.add.InplaceAddFunction.forward", "modulename": "linghe.facade.add", "qualname": "InplaceAddFunction.forward", "kind": "function", "doc": "<p>Define the forward of the custom autograd Function.</p>\n\n<p>This function is to be overridden by all subclasses.\nThere are two ways to define forward:</p>\n\n<p>Usage 1 (Combined forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(ctx: Any, *args: Any, **kwargs: Any) -&gt; Any:\n    pass\n</code></pre>\n\n<ul>\n<li>It must accept a context ctx as the first argument, followed by any\nnumber of arguments (tensors or other types).</li>\n<li>See :ref:<code>combining-forward-context</code> for more details</li>\n</ul>\n\n<p>Usage 2 (Separate forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(*args: Any, **kwargs: Any) -&gt; Any:\n    pass\n\n@staticmethod\ndef setup_context(ctx: Any, inputs: Tuple[Any, ...], output: Any) -&gt; None:\n    pass\n</code></pre>\n\n<ul>\n<li>The forward no longer accepts a ctx argument.</li>\n<li>Instead, you must also override the :meth:<code>torch.autograd.Function.setup_context</code>\nstaticmethod to handle setting up the <code>ctx</code> object.\n<code>output</code> is the output of the forward, <code>inputs</code> are a Tuple of inputs\nto the forward.</li>\n<li>See :ref:<code>extending-autograd</code> for more details</li>\n</ul>\n\n<p>The context can be used to store arbitrary data that can be then\nretrieved during the backward pass. Tensors should not be stored\ndirectly on <code>ctx</code> (though this is not currently enforced for\nbackward compatibility). Instead, tensors should be saved either with\n:func:<code>ctx.save_for_backward</code> if they are intended to be used in\n<code>backward</code> (equivalently, <code>vjp</code>) or :func:<code>ctx.save_for_forward</code>\nif they are intended to be used for in <code>jvp</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.add.InplaceAddFunction.backward", "modulename": "linghe.facade.add", "qualname": "InplaceAddFunction.backward", "kind": "function", "doc": "<p>Define a formula for differentiating the operation with backward mode automatic differentiation.</p>\n\n<p>This function is to be overridden by all subclasses.\n(Defining this function is equivalent to defining the <code>vjp</code> function.)</p>\n\n<p>It must accept a context :attr:<code>ctx</code> as the first argument, followed by\nas many outputs as the :func:<code>forward</code> returned (None will be passed in\nfor non tensor outputs of the forward function),\nand it should return as many tensors, as there were inputs to\n:func:<code>forward</code>. Each argument is the gradient w.r.t the given output,\nand each returned value should be the gradient w.r.t. the\ncorresponding input. If an input is not a Tensor or is a Tensor not\nrequiring grads, you can just pass None as a gradient for that input.</p>\n\n<p>The context can be used to retrieve tensors saved during the forward\npass. It also has an attribute :attr:<code>ctx.needs_input_grad</code> as a tuple\nof booleans representing whether each input needs gradient. E.g.,\n:func:<code>backward</code> will have <code>ctx.needs_input_grad[0] = True</code> if the\nfirst input to :func:<code>forward</code> needs gradient computed w.r.t. the\noutput.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">grad_output</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.fp32_linear", "modulename": "linghe.facade.fp32_linear", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.facade.fp32_linear.FusedFp32GEMM", "modulename": "linghe.facade.fp32_linear", "qualname": "FusedFp32GEMM", "kind": "class", "doc": "<p>Base class to create custom <code>autograd.Function</code>.</p>\n\n<p>To create a custom <code>autograd.Function</code>, subclass this class and implement\nthe :meth:<code>forward</code> and :meth:<code>backward</code> static methods. Then, to use your custom\nop in the forward pass, call the class method <code>apply</code>. Do not call\n:meth:<code>forward</code> directly.</p>\n\n<p>To ensure correctness and best performance, make sure you are calling the\ncorrect methods on <code>ctx</code> and validating your backward function using\n:func:<code>torch.autograd.gradcheck</code>.</p>\n\n<p>See :ref:<code>extending-autograd</code> for more details on how to use this class.</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; # xdoctest: +REQUIRES(env:TORCH_DOCTEST_AUTOGRAD)\n&gt;&gt;&gt; class Exp(Function):\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def forward(ctx, i):\n&gt;&gt;&gt;         result = i.exp()\n&gt;&gt;&gt;         ctx.save_for_backward(result)\n&gt;&gt;&gt;         return result\n&gt;&gt;&gt;\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def backward(ctx, grad_output):\n&gt;&gt;&gt;         result, = ctx.saved_tensors\n&gt;&gt;&gt;         return grad_output * result\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Use it by calling the apply method:\n&gt;&gt;&gt; # xdoctest: +SKIP\n&gt;&gt;&gt; output = Exp.apply(input)\n</code></pre>\n", "bases": "torch.autograd.function.Function"}, {"fullname": "linghe.facade.fp32_linear.FusedFp32GEMM.forward", "modulename": "linghe.facade.fp32_linear", "qualname": "FusedFp32GEMM.forward", "kind": "function", "doc": "<p>Define the forward of the custom autograd Function.</p>\n\n<p>This function is to be overridden by all subclasses.\nThere are two ways to define forward:</p>\n\n<p>Usage 1 (Combined forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(ctx: Any, *args: Any, **kwargs: Any) -&gt; Any:\n    pass\n</code></pre>\n\n<ul>\n<li>It must accept a context ctx as the first argument, followed by any\nnumber of arguments (tensors or other types).</li>\n<li>See :ref:<code>combining-forward-context</code> for more details</li>\n</ul>\n\n<p>Usage 2 (Separate forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(*args: Any, **kwargs: Any) -&gt; Any:\n    pass\n\n@staticmethod\ndef setup_context(ctx: Any, inputs: Tuple[Any, ...], output: Any) -&gt; None:\n    pass\n</code></pre>\n\n<ul>\n<li>The forward no longer accepts a ctx argument.</li>\n<li>Instead, you must also override the :meth:<code>torch.autograd.Function.setup_context</code>\nstaticmethod to handle setting up the <code>ctx</code> object.\n<code>output</code> is the output of the forward, <code>inputs</code> are a Tuple of inputs\nto the forward.</li>\n<li>See :ref:<code>extending-autograd</code> for more details</li>\n</ul>\n\n<p>The context can be used to store arbitrary data that can be then\nretrieved during the backward pass. Tensors should not be stored\ndirectly on <code>ctx</code> (though this is not currently enforced for\nbackward compatibility). Instead, tensors should be saved either with\n:func:<code>ctx.save_for_backward</code> if they are intended to be used in\n<code>backward</code> (equivalently, <code>vjp</code>) or :func:<code>ctx.save_for_forward</code>\nif they are intended to be used for in <code>jvp</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"n\">weight</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.fp32_linear.FusedFp32GEMM.backward", "modulename": "linghe.facade.fp32_linear", "qualname": "FusedFp32GEMM.backward", "kind": "function", "doc": "<p>Define a formula for differentiating the operation with backward mode automatic differentiation.</p>\n\n<p>This function is to be overridden by all subclasses.\n(Defining this function is equivalent to defining the <code>vjp</code> function.)</p>\n\n<p>It must accept a context :attr:<code>ctx</code> as the first argument, followed by\nas many outputs as the :func:<code>forward</code> returned (None will be passed in\nfor non tensor outputs of the forward function),\nand it should return as many tensors, as there were inputs to\n:func:<code>forward</code>. Each argument is the gradient w.r.t the given output,\nand each returned value should be the gradient w.r.t. the\ncorresponding input. If an input is not a Tensor or is a Tensor not\nrequiring grads, you can just pass None as a gradient for that input.</p>\n\n<p>The context can be used to retrieve tensors saved during the forward\npass. It also has an attribute :attr:<code>ctx.needs_input_grad</code> as a tuple\nof booleans representing whether each input needs gradient. E.g.,\n:func:<code>backward</code> will have <code>ctx.needs_input_grad[0] = True</code> if the\nfirst input to :func:<code>forward</code> needs gradient computed w.r.t. the\noutput.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">grad_output</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.loss", "modulename": "linghe.facade.loss", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.facade.loss.SoftmaxCrossEntropyFunction", "modulename": "linghe.facade.loss", "qualname": "SoftmaxCrossEntropyFunction", "kind": "class", "doc": "<p>Base class to create custom <code>autograd.Function</code>.</p>\n\n<p>To create a custom <code>autograd.Function</code>, subclass this class and implement\nthe :meth:<code>forward</code> and :meth:<code>backward</code> static methods. Then, to use your custom\nop in the forward pass, call the class method <code>apply</code>. Do not call\n:meth:<code>forward</code> directly.</p>\n\n<p>To ensure correctness and best performance, make sure you are calling the\ncorrect methods on <code>ctx</code> and validating your backward function using\n:func:<code>torch.autograd.gradcheck</code>.</p>\n\n<p>See :ref:<code>extending-autograd</code> for more details on how to use this class.</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; # xdoctest: +REQUIRES(env:TORCH_DOCTEST_AUTOGRAD)\n&gt;&gt;&gt; class Exp(Function):\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def forward(ctx, i):\n&gt;&gt;&gt;         result = i.exp()\n&gt;&gt;&gt;         ctx.save_for_backward(result)\n&gt;&gt;&gt;         return result\n&gt;&gt;&gt;\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def backward(ctx, grad_output):\n&gt;&gt;&gt;         result, = ctx.saved_tensors\n&gt;&gt;&gt;         return grad_output * result\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Use it by calling the apply method:\n&gt;&gt;&gt; # xdoctest: +SKIP\n&gt;&gt;&gt; output = Exp.apply(input)\n</code></pre>\n", "bases": "torch.autograd.function.Function"}, {"fullname": "linghe.facade.loss.SoftmaxCrossEntropyFunction.forward", "modulename": "linghe.facade.loss", "qualname": "SoftmaxCrossEntropyFunction.forward", "kind": "function", "doc": "<p>Define the forward of the custom autograd Function.</p>\n\n<p>This function is to be overridden by all subclasses.\nThere are two ways to define forward:</p>\n\n<p>Usage 1 (Combined forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(ctx: Any, *args: Any, **kwargs: Any) -&gt; Any:\n    pass\n</code></pre>\n\n<ul>\n<li>It must accept a context ctx as the first argument, followed by any\nnumber of arguments (tensors or other types).</li>\n<li>See :ref:<code>combining-forward-context</code> for more details</li>\n</ul>\n\n<p>Usage 2 (Separate forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(*args: Any, **kwargs: Any) -&gt; Any:\n    pass\n\n@staticmethod\ndef setup_context(ctx: Any, inputs: Tuple[Any, ...], output: Any) -&gt; None:\n    pass\n</code></pre>\n\n<ul>\n<li>The forward no longer accepts a ctx argument.</li>\n<li>Instead, you must also override the :meth:<code>torch.autograd.Function.setup_context</code>\nstaticmethod to handle setting up the <code>ctx</code> object.\n<code>output</code> is the output of the forward, <code>inputs</code> are a Tuple of inputs\nto the forward.</li>\n<li>See :ref:<code>extending-autograd</code> for more details</li>\n</ul>\n\n<p>The context can be used to store arbitrary data that can be then\nretrieved during the backward pass. Tensors should not be stored\ndirectly on <code>ctx</code> (though this is not currently enforced for\nbackward compatibility). Instead, tensors should be saved either with\n:func:<code>ctx.save_for_backward</code> if they are intended to be used in\n<code>backward</code> (equivalently, <code>vjp</code>) or :func:<code>ctx.save_for_forward</code>\nif they are intended to be used for in <code>jvp</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">logits</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.loss.SoftmaxCrossEntropyFunction.backward", "modulename": "linghe.facade.loss", "qualname": "SoftmaxCrossEntropyFunction.backward", "kind": "function", "doc": "<p>Define a formula for differentiating the operation with backward mode automatic differentiation.</p>\n\n<p>This function is to be overridden by all subclasses.\n(Defining this function is equivalent to defining the <code>vjp</code> function.)</p>\n\n<p>It must accept a context :attr:<code>ctx</code> as the first argument, followed by\nas many outputs as the :func:<code>forward</code> returned (None will be passed in\nfor non tensor outputs of the forward function),\nand it should return as many tensors, as there were inputs to\n:func:<code>forward</code>. Each argument is the gradient w.r.t the given output,\nand each returned value should be the gradient w.r.t. the\ncorresponding input. If an input is not a Tensor or is a Tensor not\nrequiring grads, you can just pass None as a gradient for that input.</p>\n\n<p>The context can be used to retrieve tensors saved during the forward\npass. It also has an attribute :attr:<code>ctx.needs_input_grad</code> as a tuple\nof booleans representing whether each input needs gradient. E.g.,\n:func:<code>backward</code> will have <code>ctx.needs_input_grad[0] = True</code> if the\nfirst input to :func:<code>forward</code> needs gradient computed w.r.t. the\noutput.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">grad_output</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.loss.GradScalingFunction", "modulename": "linghe.facade.loss", "qualname": "GradScalingFunction", "kind": "class", "doc": "<p>Base class to create custom <code>autograd.Function</code>.</p>\n\n<p>To create a custom <code>autograd.Function</code>, subclass this class and implement\nthe :meth:<code>forward</code> and :meth:<code>backward</code> static methods. Then, to use your custom\nop in the forward pass, call the class method <code>apply</code>. Do not call\n:meth:<code>forward</code> directly.</p>\n\n<p>To ensure correctness and best performance, make sure you are calling the\ncorrect methods on <code>ctx</code> and validating your backward function using\n:func:<code>torch.autograd.gradcheck</code>.</p>\n\n<p>See :ref:<code>extending-autograd</code> for more details on how to use this class.</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; # xdoctest: +REQUIRES(env:TORCH_DOCTEST_AUTOGRAD)\n&gt;&gt;&gt; class Exp(Function):\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def forward(ctx, i):\n&gt;&gt;&gt;         result = i.exp()\n&gt;&gt;&gt;         ctx.save_for_backward(result)\n&gt;&gt;&gt;         return result\n&gt;&gt;&gt;\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def backward(ctx, grad_output):\n&gt;&gt;&gt;         result, = ctx.saved_tensors\n&gt;&gt;&gt;         return grad_output * result\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Use it by calling the apply method:\n&gt;&gt;&gt; # xdoctest: +SKIP\n&gt;&gt;&gt; output = Exp.apply(input)\n</code></pre>\n", "bases": "torch.autograd.function.Function"}, {"fullname": "linghe.facade.loss.GradScalingFunction.forward", "modulename": "linghe.facade.loss", "qualname": "GradScalingFunction.forward", "kind": "function", "doc": "<p>Define the forward of the custom autograd Function.</p>\n\n<p>This function is to be overridden by all subclasses.\nThere are two ways to define forward:</p>\n\n<p>Usage 1 (Combined forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(ctx: Any, *args: Any, **kwargs: Any) -&gt; Any:\n    pass\n</code></pre>\n\n<ul>\n<li>It must accept a context ctx as the first argument, followed by any\nnumber of arguments (tensors or other types).</li>\n<li>See :ref:<code>combining-forward-context</code> for more details</li>\n</ul>\n\n<p>Usage 2 (Separate forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(*args: Any, **kwargs: Any) -&gt; Any:\n    pass\n\n@staticmethod\ndef setup_context(ctx: Any, inputs: Tuple[Any, ...], output: Any) -&gt; None:\n    pass\n</code></pre>\n\n<ul>\n<li>The forward no longer accepts a ctx argument.</li>\n<li>Instead, you must also override the :meth:<code>torch.autograd.Function.setup_context</code>\nstaticmethod to handle setting up the <code>ctx</code> object.\n<code>output</code> is the output of the forward, <code>inputs</code> are a Tuple of inputs\nto the forward.</li>\n<li>See :ref:<code>extending-autograd</code> for more details</li>\n</ul>\n\n<p>The context can be used to store arbitrary data that can be then\nretrieved during the backward pass. Tensors should not be stored\ndirectly on <code>ctx</code> (though this is not currently enforced for\nbackward compatibility). Instead, tensors should be saved either with\n:func:<code>ctx.save_for_backward</code> if they are intended to be used in\n<code>backward</code> (equivalently, <code>vjp</code>) or :func:<code>ctx.save_for_forward</code>\nif they are intended to be used for in <code>jvp</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">coef</span><span class=\"o\">=</span><span class=\"mf\">0.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.loss.GradScalingFunction.backward", "modulename": "linghe.facade.loss", "qualname": "GradScalingFunction.backward", "kind": "function", "doc": "<p>Define a formula for differentiating the operation with backward mode automatic differentiation.</p>\n\n<p>This function is to be overridden by all subclasses.\n(Defining this function is equivalent to defining the <code>vjp</code> function.)</p>\n\n<p>It must accept a context :attr:<code>ctx</code> as the first argument, followed by\nas many outputs as the :func:<code>forward</code> returned (None will be passed in\nfor non tensor outputs of the forward function),\nand it should return as many tensors, as there were inputs to\n:func:<code>forward</code>. Each argument is the gradient w.r.t the given output,\nand each returned value should be the gradient w.r.t. the\ncorresponding input. If an input is not a Tensor or is a Tensor not\nrequiring grads, you can just pass None as a gradient for that input.</p>\n\n<p>The context can be used to retrieve tensors saved during the forward\npass. It also has an attribute :attr:<code>ctx.needs_input_grad</code> as a tuple\nof booleans representing whether each input needs gradient. E.g.,\n:func:<code>backward</code> will have <code>ctx.needs_input_grad[0] = True</code> if the\nfirst input to :func:<code>forward</code> needs gradient computed w.r.t. the\noutput.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">grad_output</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.norm", "modulename": "linghe.facade.norm", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.facade.norm.RMSNormFunction", "modulename": "linghe.facade.norm", "qualname": "RMSNormFunction", "kind": "class", "doc": "<p>Base class to create custom <code>autograd.Function</code>.</p>\n\n<p>To create a custom <code>autograd.Function</code>, subclass this class and implement\nthe :meth:<code>forward</code> and :meth:<code>backward</code> static methods. Then, to use your custom\nop in the forward pass, call the class method <code>apply</code>. Do not call\n:meth:<code>forward</code> directly.</p>\n\n<p>To ensure correctness and best performance, make sure you are calling the\ncorrect methods on <code>ctx</code> and validating your backward function using\n:func:<code>torch.autograd.gradcheck</code>.</p>\n\n<p>See :ref:<code>extending-autograd</code> for more details on how to use this class.</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; # xdoctest: +REQUIRES(env:TORCH_DOCTEST_AUTOGRAD)\n&gt;&gt;&gt; class Exp(Function):\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def forward(ctx, i):\n&gt;&gt;&gt;         result = i.exp()\n&gt;&gt;&gt;         ctx.save_for_backward(result)\n&gt;&gt;&gt;         return result\n&gt;&gt;&gt;\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def backward(ctx, grad_output):\n&gt;&gt;&gt;         result, = ctx.saved_tensors\n&gt;&gt;&gt;         return grad_output * result\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Use it by calling the apply method:\n&gt;&gt;&gt; # xdoctest: +SKIP\n&gt;&gt;&gt; output = Exp.apply(input)\n</code></pre>\n", "bases": "torch.autograd.function.Function"}, {"fullname": "linghe.facade.norm.RMSNormFunction.forward", "modulename": "linghe.facade.norm", "qualname": "RMSNormFunction.forward", "kind": "function", "doc": "<p>Define the forward of the custom autograd Function.</p>\n\n<p>This function is to be overridden by all subclasses.\nThere are two ways to define forward:</p>\n\n<p>Usage 1 (Combined forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(ctx: Any, *args: Any, **kwargs: Any) -&gt; Any:\n    pass\n</code></pre>\n\n<ul>\n<li>It must accept a context ctx as the first argument, followed by any\nnumber of arguments (tensors or other types).</li>\n<li>See :ref:<code>combining-forward-context</code> for more details</li>\n</ul>\n\n<p>Usage 2 (Separate forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(*args: Any, **kwargs: Any) -&gt; Any:\n    pass\n\n@staticmethod\ndef setup_context(ctx: Any, inputs: Tuple[Any, ...], output: Any) -&gt; None:\n    pass\n</code></pre>\n\n<ul>\n<li>The forward no longer accepts a ctx argument.</li>\n<li>Instead, you must also override the :meth:<code>torch.autograd.Function.setup_context</code>\nstaticmethod to handle setting up the <code>ctx</code> object.\n<code>output</code> is the output of the forward, <code>inputs</code> are a Tuple of inputs\nto the forward.</li>\n<li>See :ref:<code>extending-autograd</code> for more details</li>\n</ul>\n\n<p>The context can be used to store arbitrary data that can be then\nretrieved during the backward pass. Tensors should not be stored\ndirectly on <code>ctx</code> (though this is not currently enforced for\nbackward compatibility). Instead, tensors should be saved either with\n:func:<code>ctx.save_for_backward</code> if they are intended to be used in\n<code>backward</code> (equivalently, <code>vjp</code>) or :func:<code>ctx.save_for_forward</code>\nif they are intended to be used for in <code>jvp</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">weight</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.norm.RMSNormFunction.backward", "modulename": "linghe.facade.norm", "qualname": "RMSNormFunction.backward", "kind": "function", "doc": "<p>Define a formula for differentiating the operation with backward mode automatic differentiation.</p>\n\n<p>This function is to be overridden by all subclasses.\n(Defining this function is equivalent to defining the <code>vjp</code> function.)</p>\n\n<p>It must accept a context :attr:<code>ctx</code> as the first argument, followed by\nas many outputs as the :func:<code>forward</code> returned (None will be passed in\nfor non tensor outputs of the forward function),\nand it should return as many tensors, as there were inputs to\n:func:<code>forward</code>. Each argument is the gradient w.r.t the given output,\nand each returned value should be the gradient w.r.t. the\ncorresponding input. If an input is not a Tensor or is a Tensor not\nrequiring grads, you can just pass None as a gradient for that input.</p>\n\n<p>The context can be used to retrieve tensors saved during the forward\npass. It also has an attribute :attr:<code>ctx.needs_input_grad</code> as a tuple\nof booleans representing whether each input needs gradient. E.g.,\n:func:<code>backward</code> will have <code>ctx.needs_input_grad[0] = True</code> if the\nfirst input to :func:<code>forward</code> needs gradient computed w.r.t. the\noutput.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">dy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.norm.GroupNormGateFunction", "modulename": "linghe.facade.norm", "qualname": "GroupNormGateFunction", "kind": "class", "doc": "<p>Base class to create custom <code>autograd.Function</code>.</p>\n\n<p>To create a custom <code>autograd.Function</code>, subclass this class and implement\nthe :meth:<code>forward</code> and :meth:<code>backward</code> static methods. Then, to use your custom\nop in the forward pass, call the class method <code>apply</code>. Do not call\n:meth:<code>forward</code> directly.</p>\n\n<p>To ensure correctness and best performance, make sure you are calling the\ncorrect methods on <code>ctx</code> and validating your backward function using\n:func:<code>torch.autograd.gradcheck</code>.</p>\n\n<p>See :ref:<code>extending-autograd</code> for more details on how to use this class.</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; # xdoctest: +REQUIRES(env:TORCH_DOCTEST_AUTOGRAD)\n&gt;&gt;&gt; class Exp(Function):\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def forward(ctx, i):\n&gt;&gt;&gt;         result = i.exp()\n&gt;&gt;&gt;         ctx.save_for_backward(result)\n&gt;&gt;&gt;         return result\n&gt;&gt;&gt;\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def backward(ctx, grad_output):\n&gt;&gt;&gt;         result, = ctx.saved_tensors\n&gt;&gt;&gt;         return grad_output * result\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Use it by calling the apply method:\n&gt;&gt;&gt; # xdoctest: +SKIP\n&gt;&gt;&gt; output = Exp.apply(input)\n</code></pre>\n", "bases": "torch.autograd.function.Function"}, {"fullname": "linghe.facade.norm.GroupNormGateFunction.forward", "modulename": "linghe.facade.norm", "qualname": "GroupNormGateFunction.forward", "kind": "function", "doc": "<p>Define the forward of the custom autograd Function.</p>\n\n<p>This function is to be overridden by all subclasses.\nThere are two ways to define forward:</p>\n\n<p>Usage 1 (Combined forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(ctx: Any, *args: Any, **kwargs: Any) -&gt; Any:\n    pass\n</code></pre>\n\n<ul>\n<li>It must accept a context ctx as the first argument, followed by any\nnumber of arguments (tensors or other types).</li>\n<li>See :ref:<code>combining-forward-context</code> for more details</li>\n</ul>\n\n<p>Usage 2 (Separate forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(*args: Any, **kwargs: Any) -&gt; Any:\n    pass\n\n@staticmethod\ndef setup_context(ctx: Any, inputs: Tuple[Any, ...], output: Any) -&gt; None:\n    pass\n</code></pre>\n\n<ul>\n<li>The forward no longer accepts a ctx argument.</li>\n<li>Instead, you must also override the :meth:<code>torch.autograd.Function.setup_context</code>\nstaticmethod to handle setting up the <code>ctx</code> object.\n<code>output</code> is the output of the forward, <code>inputs</code> are a Tuple of inputs\nto the forward.</li>\n<li>See :ref:<code>extending-autograd</code> for more details</li>\n</ul>\n\n<p>The context can be used to store arbitrary data that can be then\nretrieved during the backward pass. Tensors should not be stored\ndirectly on <code>ctx</code> (though this is not currently enforced for\nbackward compatibility). Instead, tensors should be saved either with\n:func:<code>ctx.save_for_backward</code> if they are intended to be used in\n<code>backward</code> (equivalently, <code>vjp</code>) or :func:<code>ctx.save_for_forward</code>\nif they are intended to be used for in <code>jvp</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">gate</span>, </span><span class=\"param\"><span class=\"n\">weight</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>, </span><span class=\"param\"><span class=\"n\">group_size</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.norm.GroupNormGateFunction.backward", "modulename": "linghe.facade.norm", "qualname": "GroupNormGateFunction.backward", "kind": "function", "doc": "<p>Define a formula for differentiating the operation with backward mode automatic differentiation.</p>\n\n<p>This function is to be overridden by all subclasses.\n(Defining this function is equivalent to defining the <code>vjp</code> function.)</p>\n\n<p>It must accept a context :attr:<code>ctx</code> as the first argument, followed by\nas many outputs as the :func:<code>forward</code> returned (None will be passed in\nfor non tensor outputs of the forward function),\nand it should return as many tensors, as there were inputs to\n:func:<code>forward</code>. Each argument is the gradient w.r.t the given output,\nand each returned value should be the gradient w.r.t. the\ncorresponding input. If an input is not a Tensor or is a Tensor not\nrequiring grads, you can just pass None as a gradient for that input.</p>\n\n<p>The context can be used to retrieve tensors saved during the forward\npass. It also has an attribute :attr:<code>ctx.needs_input_grad</code> as a tuple\nof booleans representing whether each input needs gradient. E.g.,\n:func:<code>backward</code> will have <code>ctx.needs_input_grad[0] = True</code> if the\nfirst input to :func:<code>forward</code> needs gradient computed w.r.t. the\noutput.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">dy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.rope", "modulename": "linghe.facade.rope", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.facade.rope.QkNormHalfRopeFunction", "modulename": "linghe.facade.rope", "qualname": "QkNormHalfRopeFunction", "kind": "class", "doc": "<p>Base class to create custom <code>autograd.Function</code>.</p>\n\n<p>To create a custom <code>autograd.Function</code>, subclass this class and implement\nthe :meth:<code>forward</code> and :meth:<code>backward</code> static methods. Then, to use your custom\nop in the forward pass, call the class method <code>apply</code>. Do not call\n:meth:<code>forward</code> directly.</p>\n\n<p>To ensure correctness and best performance, make sure you are calling the\ncorrect methods on <code>ctx</code> and validating your backward function using\n:func:<code>torch.autograd.gradcheck</code>.</p>\n\n<p>See :ref:<code>extending-autograd</code> for more details on how to use this class.</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; # xdoctest: +REQUIRES(env:TORCH_DOCTEST_AUTOGRAD)\n&gt;&gt;&gt; class Exp(Function):\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def forward(ctx, i):\n&gt;&gt;&gt;         result = i.exp()\n&gt;&gt;&gt;         ctx.save_for_backward(result)\n&gt;&gt;&gt;         return result\n&gt;&gt;&gt;\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def backward(ctx, grad_output):\n&gt;&gt;&gt;         result, = ctx.saved_tensors\n&gt;&gt;&gt;         return grad_output * result\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Use it by calling the apply method:\n&gt;&gt;&gt; # xdoctest: +SKIP\n&gt;&gt;&gt; output = Exp.apply(input)\n</code></pre>\n", "bases": "torch.autograd.function.Function"}, {"fullname": "linghe.facade.rope.QkNormHalfRopeFunction.forward", "modulename": "linghe.facade.rope", "qualname": "QkNormHalfRopeFunction.forward", "kind": "function", "doc": "<p>Define the forward of the custom autograd Function.</p>\n\n<p>This function is to be overridden by all subclasses.\nThere are two ways to define forward:</p>\n\n<p>Usage 1 (Combined forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(ctx: Any, *args: Any, **kwargs: Any) -&gt; Any:\n    pass\n</code></pre>\n\n<ul>\n<li>It must accept a context ctx as the first argument, followed by any\nnumber of arguments (tensors or other types).</li>\n<li>See :ref:<code>combining-forward-context</code> for more details</li>\n</ul>\n\n<p>Usage 2 (Separate forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(*args: Any, **kwargs: Any) -&gt; Any:\n    pass\n\n@staticmethod\ndef setup_context(ctx: Any, inputs: Tuple[Any, ...], output: Any) -&gt; None:\n    pass\n</code></pre>\n\n<ul>\n<li>The forward no longer accepts a ctx argument.</li>\n<li>Instead, you must also override the :meth:<code>torch.autograd.Function.setup_context</code>\nstaticmethod to handle setting up the <code>ctx</code> object.\n<code>output</code> is the output of the forward, <code>inputs</code> are a Tuple of inputs\nto the forward.</li>\n<li>See :ref:<code>extending-autograd</code> for more details</li>\n</ul>\n\n<p>The context can be used to store arbitrary data that can be then\nretrieved during the backward pass. Tensors should not be stored\ndirectly on <code>ctx</code> (though this is not currently enforced for\nbackward compatibility). Instead, tensors should be saved either with\n:func:<code>ctx.save_for_backward</code> if they are intended to be used in\n<code>backward</code> (equivalently, <code>vjp</code>) or :func:<code>ctx.save_for_forward</code>\nif they are intended to be used for in <code>jvp</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">qkv</span>, </span><span class=\"param\"><span class=\"n\">q_norm_weight</span>, </span><span class=\"param\"><span class=\"n\">k_norm_weight</span>, </span><span class=\"param\"><span class=\"n\">freqs</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"o\">=</span><span class=\"mi\">32</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.rope.QkNormHalfRopeFunction.backward", "modulename": "linghe.facade.rope", "qualname": "QkNormHalfRopeFunction.backward", "kind": "function", "doc": "<p>Define a formula for differentiating the operation with backward mode automatic differentiation.</p>\n\n<p>This function is to be overridden by all subclasses.\n(Defining this function is equivalent to defining the <code>vjp</code> function.)</p>\n\n<p>It must accept a context :attr:<code>ctx</code> as the first argument, followed by\nas many outputs as the :func:<code>forward</code> returned (None will be passed in\nfor non tensor outputs of the forward function),\nand it should return as many tensors, as there were inputs to\n:func:<code>forward</code>. Each argument is the gradient w.r.t the given output,\nand each returned value should be the gradient w.r.t. the\ncorresponding input. If an input is not a Tensor or is a Tensor not\nrequiring grads, you can just pass None as a gradient for that input.</p>\n\n<p>The context can be used to retrieve tensors saved during the forward\npass. It also has an attribute :attr:<code>ctx.needs_input_grad</code> as a tuple\nof booleans representing whether each input needs gradient. E.g.,\n:func:<code>backward</code> will have <code>ctx.needs_input_grad[0] = True</code> if the\nfirst input to :func:<code>forward</code> needs gradient computed w.r.t. the\noutput.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">grad_q</span>, </span><span class=\"param\"><span class=\"n\">grad_k</span>, </span><span class=\"param\"><span class=\"n\">grad_v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.transpose", "modulename": "linghe.facade.transpose", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.facade.transpose.TransposeDim01Function", "modulename": "linghe.facade.transpose", "qualname": "TransposeDim01Function", "kind": "class", "doc": "<p>Base class to create custom <code>autograd.Function</code>.</p>\n\n<p>To create a custom <code>autograd.Function</code>, subclass this class and implement\nthe :meth:<code>forward</code> and :meth:<code>backward</code> static methods. Then, to use your custom\nop in the forward pass, call the class method <code>apply</code>. Do not call\n:meth:<code>forward</code> directly.</p>\n\n<p>To ensure correctness and best performance, make sure you are calling the\ncorrect methods on <code>ctx</code> and validating your backward function using\n:func:<code>torch.autograd.gradcheck</code>.</p>\n\n<p>See :ref:<code>extending-autograd</code> for more details on how to use this class.</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; # xdoctest: +REQUIRES(env:TORCH_DOCTEST_AUTOGRAD)\n&gt;&gt;&gt; class Exp(Function):\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def forward(ctx, i):\n&gt;&gt;&gt;         result = i.exp()\n&gt;&gt;&gt;         ctx.save_for_backward(result)\n&gt;&gt;&gt;         return result\n&gt;&gt;&gt;\n&gt;&gt;&gt;     @staticmethod\n&gt;&gt;&gt;     def backward(ctx, grad_output):\n&gt;&gt;&gt;         result, = ctx.saved_tensors\n&gt;&gt;&gt;         return grad_output * result\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Use it by calling the apply method:\n&gt;&gt;&gt; # xdoctest: +SKIP\n&gt;&gt;&gt; output = Exp.apply(input)\n</code></pre>\n", "bases": "torch.autograd.function.Function"}, {"fullname": "linghe.facade.transpose.TransposeDim01Function.forward", "modulename": "linghe.facade.transpose", "qualname": "TransposeDim01Function.forward", "kind": "function", "doc": "<p>Define the forward of the custom autograd Function.</p>\n\n<p>This function is to be overridden by all subclasses.\nThere are two ways to define forward:</p>\n\n<p>Usage 1 (Combined forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(ctx: Any, *args: Any, **kwargs: Any) -&gt; Any:\n    pass\n</code></pre>\n\n<ul>\n<li>It must accept a context ctx as the first argument, followed by any\nnumber of arguments (tensors or other types).</li>\n<li>See :ref:<code>combining-forward-context</code> for more details</li>\n</ul>\n\n<p>Usage 2 (Separate forward and ctx)::</p>\n\n<pre><code>@staticmethod\ndef forward(*args: Any, **kwargs: Any) -&gt; Any:\n    pass\n\n@staticmethod\ndef setup_context(ctx: Any, inputs: Tuple[Any, ...], output: Any) -&gt; None:\n    pass\n</code></pre>\n\n<ul>\n<li>The forward no longer accepts a ctx argument.</li>\n<li>Instead, you must also override the :meth:<code>torch.autograd.Function.setup_context</code>\nstaticmethod to handle setting up the <code>ctx</code> object.\n<code>output</code> is the output of the forward, <code>inputs</code> are a Tuple of inputs\nto the forward.</li>\n<li>See :ref:<code>extending-autograd</code> for more details</li>\n</ul>\n\n<p>The context can be used to store arbitrary data that can be then\nretrieved during the backward pass. Tensors should not be stored\ndirectly on <code>ctx</code> (though this is not currently enforced for\nbackward compatibility). Instead, tensors should be saved either with\n:func:<code>ctx.save_for_backward</code> if they are intended to be used in\n<code>backward</code> (equivalently, <code>vjp</code>) or :func:<code>ctx.save_for_forward</code>\nif they are intended to be used for in <code>jvp</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.facade.transpose.TransposeDim01Function.backward", "modulename": "linghe.facade.transpose", "qualname": "TransposeDim01Function.backward", "kind": "function", "doc": "<p>Define a formula for differentiating the operation with backward mode automatic differentiation.</p>\n\n<p>This function is to be overridden by all subclasses.\n(Defining this function is equivalent to defining the <code>vjp</code> function.)</p>\n\n<p>It must accept a context :attr:<code>ctx</code> as the first argument, followed by\nas many outputs as the :func:<code>forward</code> returned (None will be passed in\nfor non tensor outputs of the forward function),\nand it should return as many tensors, as there were inputs to\n:func:<code>forward</code>. Each argument is the gradient w.r.t the given output,\nand each returned value should be the gradient w.r.t. the\ncorresponding input. If an input is not a Tensor or is a Tensor not\nrequiring grads, you can just pass None as a gradient for that input.</p>\n\n<p>The context can be used to retrieve tensors saved during the forward\npass. It also has an attribute :attr:<code>ctx.needs_input_grad</code> as a tuple\nof booleans representing whether each input needs gradient. E.g.,\n:func:<code>backward</code> will have <code>ctx.needs_input_grad[0] = True</code> if the\nfirst input to :func:<code>forward</code> needs gradient computed w.r.t. the\noutput.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctx</span>, </span><span class=\"param\"><span class=\"n\">grad_output</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.gemm", "modulename": "linghe.gemm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "linghe.gemm.fp32_gemm", "modulename": "linghe.gemm.fp32_gemm", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.gemm.fp32_gemm.fp32_gemm_kernel", "modulename": "linghe.gemm.fp32_gemm", "qualname": "fp32_gemm_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">b_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">c_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_M</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_N</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.gemm.fp32_gemm.triton_fp32_gemm", "modulename": "linghe.gemm.fp32_gemm", "qualname": "triton_fp32_gemm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.gemm.fp32_gemm.scaled_fp32_gemm_kernel", "modulename": "linghe.gemm.fp32_gemm", "qualname": "scaled_fp32_gemm_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">b_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">c_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_M</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_N</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm", "modulename": "linghe.gemm.fp32_gemm", "qualname": "triton_scaled_fp32_gemm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.gemm.fp32_gemm.fp32_gemm_for_backward_kernel", "modulename": "linghe.gemm.fp32_gemm", "qualname": "fp32_gemm_for_backward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">b_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">c_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ACCUM</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_M</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_N</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward", "modulename": "linghe.gemm.fp32_gemm", "qualname": "triton_fp32_gemm_for_backward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">accum</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.gemm.fp32_gemm.fp32_gemm_for_update_kernel", "modulename": "linghe.gemm.fp32_gemm", "qualname": "fp32_gemm_for_update_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">b_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">c_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_M</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_N</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update", "modulename": "linghe.gemm.fp32_gemm", "qualname": "triton_fp32_gemm_for_update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.gemm.fp32_gemm.scaled_fp32_gemm_for_update_kernel", "modulename": "linghe.gemm.fp32_gemm", "qualname": "scaled_fp32_gemm_for_update_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">b_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">c_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_M</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCK_SIZE_N</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update", "modulename": "linghe.gemm.fp32_gemm", "qualname": "triton_scaled_fp32_gemm_for_update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant", "modulename": "linghe.quant", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "linghe.quant.block", "modulename": "linghe.quant.block", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "linghe.quant.block.block", "modulename": "linghe.quant.block.block", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.quant.block.block.block_quant_kernel", "modulename": "linghe.quant.block.block", "qualname": "block_quant_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">y_ptr</span>, </span><span class=\"param\"><span class=\"n\">s_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">BLOCK_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.block.block.block_quant", "modulename": "linghe.quant.block.block", "qualname": "block_quant", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">block_size</span><span class=\"o\">=</span><span class=\"mi\">128</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.block.group", "modulename": "linghe.quant.block.group", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.quant.block.group.group_quant_kernel", "modulename": "linghe.quant.block.group", "qualname": "group_quant_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">y_ptr</span>, </span><span class=\"param\"><span class=\"n\">s_ptr</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">BLOCK_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.block.group.triton_group_quant", "modulename": "linghe.quant.block.group", "qualname": "triton_group_quant", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float8_e4m3fn</span>, </span><span class=\"param\"><span class=\"n\">group_size</span><span class=\"o\">=</span><span class=\"mi\">128</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.block.group.persist_group_quant_kernel", "modulename": "linghe.quant.block.group", "qualname": "persist_group_quant_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">y_ptr</span>, </span><span class=\"param\"><span class=\"n\">s_ptr</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">BLOCK_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.block.group.triton_persist_group_quant", "modulename": "linghe.quant.block.group", "qualname": "triton_persist_group_quant", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float8_e4m3fn</span>, </span><span class=\"param\"><span class=\"n\">group_size</span><span class=\"o\">=</span><span class=\"mi\">128</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel", "modulename": "linghe.quant.channel", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "linghe.quant.channel.channel", "modulename": "linghe.quant.channel.channel", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.quant.channel.channel.row_quant_kernel", "modulename": "linghe.quant.channel.channel", "qualname": "row_quant_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">q_ptr</span>, </span><span class=\"param\"><span class=\"n\">s_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">BLOCK_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.triton_row_quant", "modulename": "linghe.quant.channel.channel", "qualname": "triton_row_quant", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.deprecated_tokenwise_row_quant_kernel", "modulename": "linghe.quant.channel.channel", "qualname": "deprecated_tokenwise_row_quant_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">out_ptr</span>, </span><span class=\"param\"><span class=\"n\">scale_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.triton_deprecated_tokenwise_row_quant", "modulename": "linghe.quant.channel.channel", "qualname": "triton_deprecated_tokenwise_row_quant", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.tokenwise_row_quant_kernel", "modulename": "linghe.quant.channel.channel", "qualname": "tokenwise_row_quant_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">out_ptr</span>, </span><span class=\"param\"><span class=\"n\">scale_ptr</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.triton_tokenwise_row_quant", "modulename": "linghe.quant.channel.channel", "qualname": "triton_tokenwise_row_quant", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.transpose_row_quant_kernel", "modulename": "linghe.quant.channel.channel", "qualname": "transpose_row_quant_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">q_ptr</span>, </span><span class=\"param\"><span class=\"n\">s_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.triton_transpose_row_quant", "modulename": "linghe.quant.channel.channel", "qualname": "triton_transpose_row_quant", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">side</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.triton_channel_quant_nt", "modulename": "linghe.quant.channel.channel", "qualname": "triton_channel_quant_nt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.triton_channel_quant_nn", "modulename": "linghe.quant.channel.channel", "qualname": "triton_channel_quant_nn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.triton_channel_quant_tn", "modulename": "linghe.quant.channel.channel", "qualname": "triton_channel_quant_tn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.channel_quant_forward", "modulename": "linghe.quant.channel.channel", "qualname": "channel_quant_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.channel_quant_backward", "modulename": "linghe.quant.channel.channel", "qualname": "channel_quant_backward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.channel_quant_update", "modulename": "linghe.quant.channel.channel", "qualname": "channel_quant_update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.quant.channel.channel.fp8_channel_f_and_b", "modulename": "linghe.quant.channel.channel", "qualname": "fp8_channel_f_and_b", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils", "modulename": "linghe.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "linghe.utils.add", "modulename": "linghe.utils.add", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.utils.add.inplace_add_kernel", "modulename": "linghe.utils.add", "qualname": "inplace_add_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">y_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">EVEN</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ACCUM</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.add.triton_inplace_add", "modulename": "linghe.utils.add", "qualname": "triton_inplace_add", "kind": "function", "doc": "<p>inplace add y to x\nArgs:\n    x: Tensor\n    y: Tensor\n    accum: whether accum y to x</p>\n\n<p>Returns:  x += y if accum=True else x.copy_(y)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">accum</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.dot", "modulename": "linghe.utils.dot", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.utils.dot.dot_kernel", "modulename": "linghe.utils.dot", "qualname": "dot_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">y_ptr</span>, </span><span class=\"param\"><span class=\"n\">sum_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.dot.triton_dot", "modulename": "linghe.utils.dot", "qualname": "triton_dot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.dot.mix_precise_dot_kernel", "modulename": "linghe.utils.dot", "qualname": "mix_precise_dot_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">q_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">sum_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">quant_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span>,</span><span class=\"param\">\t<span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.dot.triton_mix_precise_dot", "modulename": "linghe.utils.dot", "qualname": "triton_mix_precise_dot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"n\">smooth_scale</span>, </span><span class=\"param\"><span class=\"n\">quant_scale</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather", "modulename": "linghe.utils.gather", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.utils.gather.block_count_kernel", "modulename": "linghe.utils.gather", "qualname": "block_count_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">map_ptr</span>, </span><span class=\"param\"><span class=\"n\">count_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.make_row_id_map_kernel", "modulename": "linghe.utils.gather", "qualname": "make_row_id_map_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">map_ptr</span>, </span><span class=\"param\"><span class=\"n\">count_ptr</span>, </span><span class=\"param\"><span class=\"n\">output_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">P</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.triton_make_row_id_map", "modulename": "linghe.utils.gather", "qualname": "triton_make_row_id_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">routing_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">multiple_of</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.make_row_id_map_and_indices_kernel", "modulename": "linghe.utils.gather", "qualname": "make_row_id_map_and_indices_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">map_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">count_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">row_map_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">row_indices_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">B</span>,</span><span class=\"param\">\t<span class=\"n\">P</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.triton_make_row_id_map_and_indices", "modulename": "linghe.utils.gather", "qualname": "triton_make_row_id_map_and_indices", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">routing_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">num_out_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">multiple_of</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.index_select_kernel", "modulename": "linghe.utils.gather", "qualname": "index_select_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">out_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_out_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">index_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">T</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">SCALE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.triton_index_select", "modulename": "linghe.utils.gather", "qualname": "triton_index_select", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">indices</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scale_out</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.permute_with_mask_map_kernel", "modulename": "linghe.utils.gather", "qualname": "permute_with_mask_map_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">probs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">mask_map_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">output_data_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">output_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">output_probs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">num_experts</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">hs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">SCALE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">PROB</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.fill_padded_token_with_zero_kernel", "modulename": "linghe.utils.gather", "qualname": "fill_padded_token_with_zero_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">probs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">max_indices_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">token_per_expert_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">hs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">SCALE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">PROB</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.triton_permute_with_mask_map", "modulename": "linghe.utils.gather", "qualname": "triton_permute_with_mask_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">inp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">probs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">row_id_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_out_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">contiguous</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">tokens_per_expert</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.batch_smooth_transpose_smooth_permute_kernel", "modulename": "linghe.utils.gather", "qualname": "batch_smooth_transpose_smooth_permute_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">oss_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">ss_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">index_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">count_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">accum_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">q_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">qs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">SMOOTHED</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices", "modulename": "linghe.utils.gather", "qualname": "triton_batch_transpose_smooth_permute_with_indices", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span>,</span><span class=\"param\">\t<span class=\"n\">org_smooth_scale</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scales</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span>,</span><span class=\"param\">\t<span class=\"n\">token_count_per_expert</span>,</span><span class=\"param\">\t<span class=\"n\">splits</span>,</span><span class=\"param\">\t<span class=\"n\">x_q</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.smooth_weighted_permute_with_indices_kernel", "modulename": "linghe.utils.gather", "qualname": "smooth_weighted_permute_with_indices_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grads_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">tokens_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">q_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">ss_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">qs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">count_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">accum_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">index_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">sum_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">REVERSE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.triton_smooth_weighted_permute_with_indices", "modulename": "linghe.utils.gather", "qualname": "triton_smooth_weighted_permute_with_indices", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grads</span>,</span><span class=\"param\">\t<span class=\"n\">tokens</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scales</span>,</span><span class=\"param\">\t<span class=\"n\">token_count_per_expert</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span>,</span><span class=\"param\">\t<span class=\"n\">x_q</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_sum</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.smooth_permute_with_indices_kernel", "modulename": "linghe.utils.gather", "qualname": "smooth_permute_with_indices_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grads_data_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">grads_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">q_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">ss_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">qs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">count_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">accum_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">index_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">hs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">REVERSE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">GROUP</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.triton_smooth_permute_with_indices", "modulename": "linghe.utils.gather", "qualname": "triton_smooth_permute_with_indices", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grad_data</span>,</span><span class=\"param\">\t<span class=\"n\">grad_scale</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scales</span>,</span><span class=\"param\">\t<span class=\"n\">token_count_per_expert</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span>,</span><span class=\"param\">\t<span class=\"n\">x_q</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.smooth_permute_with_mask_map_kernel", "modulename": "linghe.utils.gather", "qualname": "smooth_permute_with_mask_map_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grads_data_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">quant_data_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">mask_map_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">grads_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">quant_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">T</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">hs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">REVERSE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.triton_smooth_permute_with_mask_map", "modulename": "linghe.utils.gather", "qualname": "triton_smooth_permute_with_mask_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">inp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">row_id_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_experts</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_out_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">hidden_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scales</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.deprecated_smooth_permute_with_mask_map_kernel", "modulename": "linghe.utils.gather", "qualname": "deprecated_smooth_permute_with_mask_map_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grads_data_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">quant_data_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">mask_map_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">quant_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">T</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">REVERSE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.gather.triton_deprecated_smooth_permute_with_mask_map", "modulename": "linghe.utils.gather", "qualname": "triton_deprecated_smooth_permute_with_mask_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">inp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">row_id_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_experts</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_out_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">hidden_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scales</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.loss", "modulename": "linghe.utils.loss", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.utils.loss.softmax_cross_entropy_forward_kernel", "modulename": "linghe.utils.loss", "qualname": "softmax_cross_entropy_forward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">logit_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">label_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">loss_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">sum_exp_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">max_logit_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">N</span>,</span><span class=\"param\">\t<span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.loss.triton_softmax_cross_entropy_forward", "modulename": "linghe.utils.loss", "qualname": "triton_softmax_cross_entropy_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logits</span>, </span><span class=\"param\"><span class=\"n\">labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.loss.softmax_cross_entropy_backward_kernel", "modulename": "linghe.utils.loss", "qualname": "softmax_cross_entropy_backward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">logit_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">label_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">sum_exp_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">max_logit_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">input_grad_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">output_grad_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">N</span>,</span><span class=\"param\">\t<span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.loss.triton_softmax_cross_entropy_backward", "modulename": "linghe.utils.loss", "qualname": "triton_softmax_cross_entropy_backward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logits</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">sum_exp</span>, </span><span class=\"param\"><span class=\"n\">max_logit</span>, </span><span class=\"param\"><span class=\"n\">input_grad</span>, </span><span class=\"param\"><span class=\"n\">output_grad</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm", "modulename": "linghe.utils.norm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "linghe.utils.norm.rms_norm_forward_kernel", "modulename": "linghe.utils.norm", "qualname": "rms_norm_forward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">weight_ptr</span>, </span><span class=\"param\"><span class=\"n\">out_ptr</span>, </span><span class=\"param\"><span class=\"n\">eps</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.triton_rms_norm_forward", "modulename": "linghe.utils.norm", "qualname": "triton_rms_norm_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">weight</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.rms_norm_backward_kernel", "modulename": "linghe.utils.norm", "qualname": "rms_norm_backward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grad_output_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">w_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dx_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dw_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">T</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.triton_rms_norm_backward", "modulename": "linghe.utils.norm", "qualname": "triton_rms_norm_backward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grad_output</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.rms_norm_and_block_quant_forward_kernel", "modulename": "linghe.utils.norm", "qualname": "rms_norm_and_block_quant_forward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">weight_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">out_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_output_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">rms_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">nb</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.rms_norm_and_block_quant_forward_n_kernel", "modulename": "linghe.utils.norm", "qualname": "rms_norm_and_block_quant_forward_n_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">weight_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">out_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">rms_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span>,</span><span class=\"param\">\t<span class=\"n\">M</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">nb</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.rms_norm_and_block_quant_forward_t_kernel", "modulename": "linghe.utils.norm", "qualname": "rms_norm_and_block_quant_forward_t_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">weight_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_output_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">rms_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.triton_rms_norm_and_block_quant_forward", "modulename": "linghe.utils.norm", "qualname": "triton_rms_norm_and_block_quant_forward", "kind": "function", "doc": "<p>Fused RMSNorm forward and block quantization.\nArgs:\n    x: Input tensor, shape [M, N]\n    weight: RMSNorm weight,  shape [N]\n    eps: epsilon value for L2 normalization.\n    out: output of quantization data\n    scale: output of quantization scale.\n    rms: output of rms\n    round_scale: Set whether to force power of 2 scales.\n    output_mode: one of {0, 1, 2}.\n        0: only output non-transpose tensor\n        1: only output transposed tensor\n        2: return both\nReturns:\n    out: quantization data\n    scale: quantization scale\n    rms: Reciprocal of the root mean square of the input calculated over the last dimension.\n    transpose_output: quantization data of transposed gradient\n    transpose_scale: quantization scale of transposed gradient</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">output_mode</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.group_norm_gate_forward_kernel", "modulename": "linghe.utils.norm", "qualname": "group_norm_gate_forward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">gate_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">weight_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">out_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span>,</span><span class=\"param\">\t<span class=\"n\">bs</span>,</span><span class=\"param\">\t<span class=\"n\">length</span>,</span><span class=\"param\">\t<span class=\"n\">DIM</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">GROUP_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.triton_group_norm_gate_forward", "modulename": "linghe.utils.norm", "qualname": "triton_group_norm_gate_forward", "kind": "function", "doc": "<p>norm and gate in linear attention\nArgs:\n    x:\n    gate:\n    weight:\n    eps:\n    group_size:</p>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">gate</span>, </span><span class=\"param\"><span class=\"n\">weight</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>, </span><span class=\"param\"><span class=\"n\">group_size</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.group_rms_gate_backward_kernel", "modulename": "linghe.utils.norm", "qualname": "group_rms_gate_backward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grad_output_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">gate_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">w_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dx_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dg_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dw_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span>,</span><span class=\"param\">\t<span class=\"n\">bs</span>,</span><span class=\"param\">\t<span class=\"n\">length</span>,</span><span class=\"param\">\t<span class=\"n\">DIM</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">GROUP_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.norm.triton_group_norm_gate_backward", "modulename": "linghe.utils.norm", "qualname": "triton_group_norm_gate_backward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grad_output</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">gate</span>, </span><span class=\"param\"><span class=\"n\">weight</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>, </span><span class=\"param\"><span class=\"n\">group_size</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.rearange", "modulename": "linghe.utils.rearange", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.utils.rearange.split_and_cat_kernel", "modulename": "linghe.utils.rearange", "qualname": "split_and_cat_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">y_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_output_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">count_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">accum_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">rev_accum_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">index_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">SCALE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">K</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.rearange.triton_split_and_cat", "modulename": "linghe.utils.rearange", "qualname": "triton_split_and_cat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">counts</span>, </span><span class=\"param\"><span class=\"n\">indices</span>, </span><span class=\"param\"><span class=\"n\">scales</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.reduce", "modulename": "linghe.utils.reduce", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.utils.reduce.abs_max_kernel", "modulename": "linghe.utils.reduce", "qualname": "abs_max_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">output_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">min_value</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span>,</span><span class=\"param\">\t<span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">EVEN</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">QUANTIZED</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.reduce.triton_abs_max", "modulename": "linghe.utils.reduce", "qualname": "triton_abs_max", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">smooth_scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">min_value</span><span class=\"o\">=</span><span class=\"mf\">1e-30</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.reduce.batch_count_zero_kernel", "modulename": "linghe.utils.reduce", "qualname": "batch_count_zero_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_ptrs</span>, </span><span class=\"param\"><span class=\"n\">size_ptr</span>, </span><span class=\"param\"><span class=\"n\">count_ptr</span>, </span><span class=\"param\"><span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.reduce.triton_batch_count_zero", "modulename": "linghe.utils.reduce", "qualname": "triton_batch_count_zero", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.reduce.batch_sum_with_ord_kernel", "modulename": "linghe.utils.reduce", "qualname": "batch_sum_with_ord_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_ptrs</span>, </span><span class=\"param\"><span class=\"n\">size_ptr</span>, </span><span class=\"param\"><span class=\"n\">count_ptr</span>, </span><span class=\"param\"><span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ORD</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.reduce.triton_batch_sum_with_ord", "modulename": "linghe.utils.reduce", "qualname": "triton_batch_sum_with_ord", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs</span>, </span><span class=\"param\"><span class=\"nb\">ord</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.rope", "modulename": "linghe.utils.rope", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.utils.rope.half_rope_forward_kernel", "modulename": "linghe.utils.rope", "qualname": "half_rope_forward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">q_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">k_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">freqs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">qo_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">ko_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">B</span>,</span><span class=\"param\">\t<span class=\"n\">q_stride</span>,</span><span class=\"param\">\t<span class=\"n\">k_stride</span>,</span><span class=\"param\">\t<span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.rope.triton_half_rope_forward", "modulename": "linghe.utils.rope", "qualname": "triton_half_rope_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">freqs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.rope.half_rope_backward_kernel", "modulename": "linghe.utils.rope", "qualname": "half_rope_backward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">q_ptr</span>, </span><span class=\"param\"><span class=\"n\">k_ptr</span>, </span><span class=\"param\"><span class=\"n\">freqs_ptr</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.rope.triton_half_rope_backward", "modulename": "linghe.utils.rope", "qualname": "triton_half_rope_backward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">q_grad</span>, </span><span class=\"param\"><span class=\"n\">k_grad</span>, </span><span class=\"param\"><span class=\"n\">freqs</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.rope.qk_norm_and_half_rope_forward_kernel", "modulename": "linghe.utils.rope", "qualname": "qk_norm_and_half_rope_forward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">qkv_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">q_norm_weight_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">k_norm_weight_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">freqs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">qo_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">ko_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">vo_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">B</span>,</span><span class=\"param\">\t<span class=\"n\">stride</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span>,</span><span class=\"param\">\t<span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">interleave</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.rope.triton_qk_norm_and_half_rope_forward", "modulename": "linghe.utils.rope", "qualname": "triton_qk_norm_and_half_rope_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">qkv</span>,</span><span class=\"param\">\t<span class=\"n\">q_norm_weight</span>,</span><span class=\"param\">\t<span class=\"n\">k_norm_weight</span>,</span><span class=\"param\">\t<span class=\"n\">freqs</span>,</span><span class=\"param\">\t<span class=\"n\">H</span><span class=\"o\">=</span><span class=\"mi\">32</span>,</span><span class=\"param\">\t<span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>,</span><span class=\"param\">\t<span class=\"n\">interleave</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">transpose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.rope.qk_norm_and_half_rope_backward_kernel", "modulename": "linghe.utils.rope", "qualname": "qk_norm_and_half_rope_backward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gq_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">gk_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">gv_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">qkv_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">q_norm_weight_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">k_norm_weight_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">freqs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dqkv_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dqw_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dkw_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">B</span>,</span><span class=\"param\">\t<span class=\"n\">stride</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span>,</span><span class=\"param\">\t<span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">interleave</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.rope.triton_qk_norm_and_half_rope_backward", "modulename": "linghe.utils.rope", "qualname": "triton_qk_norm_and_half_rope_backward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gq</span>,</span><span class=\"param\">\t<span class=\"n\">gk</span>,</span><span class=\"param\">\t<span class=\"n\">gv</span>,</span><span class=\"param\">\t<span class=\"n\">qkv</span>,</span><span class=\"param\">\t<span class=\"n\">q_norm_weight</span>,</span><span class=\"param\">\t<span class=\"n\">k_norm_weight</span>,</span><span class=\"param\">\t<span class=\"n\">freqs</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>,</span><span class=\"param\">\t<span class=\"n\">transpose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">interleave</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.scatter", "modulename": "linghe.utils.scatter", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.utils.scatter.aligned_scatter_add_kernel", "modulename": "linghe.utils.scatter", "qualname": "aligned_scatter_add_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">o_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">indices_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">weights_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">K</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">SCALE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.scatter.triton_aligned_scatter_add", "modulename": "linghe.utils.scatter", "qualname": "triton_aligned_scatter_add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">outputs</span>, </span><span class=\"param\"><span class=\"n\">indices</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.scatter.scatter_add_kernel", "modulename": "linghe.utils.scatter", "qualname": "scatter_add_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">o_ptr</span>, </span><span class=\"param\"><span class=\"n\">indices_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.scatter.fp32_to_bf16_kernel", "modulename": "linghe.utils.scatter", "qualname": "fp32_to_bf16_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">o_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.scatter.triton_scatter_add", "modulename": "linghe.utils.scatter", "qualname": "triton_scatter_add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">outputs</span>, </span><span class=\"param\"><span class=\"n\">indices</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.scatter.unpermute_with_mask_map_kernel", "modulename": "linghe.utils.scatter", "qualname": "unpermute_with_mask_map_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grads_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">probs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">mask_map_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">output_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">output_probs_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">num_experts</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">PROB</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.scatter.triton_unpermute_with_mask_map", "modulename": "linghe.utils.scatter", "qualname": "triton_unpermute_with_mask_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grad</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">row_id_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">probs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.silu", "modulename": "linghe.utils.silu", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.utils.silu.silu_and_block_quant_forward_kernel", "modulename": "linghe.utils.silu", "qualname": "silu_and_block_quant_forward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">out_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_output_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">OUTPUT_MODE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.silu.triton_silu_and_block_quant_forward", "modulename": "linghe.utils.silu", "qualname": "triton_silu_and_block_quant_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">output_mode</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.silu.silu_and_block_quant_backward_kernel", "modulename": "linghe.utils.silu", "qualname": "silu_and_block_quant_backward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">g_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dx_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dx_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_dx_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_dx_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">M</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.silu.triton_silu_and_block_quant_backward", "modulename": "linghe.utils.silu", "qualname": "triton_silu_and_block_quant_backward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">g</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.silu.batch_weighted_silu_and_block_quant_forward_kernel", "modulename": "linghe.utils.silu", "qualname": "batch_weighted_silu_and_block_quant_forward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">weight_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">out_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_output_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">count_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">accum_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">OUTPUT_MODE</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward", "modulename": "linghe.utils.silu", "qualname": "triton_batch_weighted_silu_and_block_quant_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span>,</span><span class=\"param\">\t<span class=\"n\">counts</span>,</span><span class=\"param\">\t<span class=\"n\">splits</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">output_mode</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.silu.batch_weighted_silu_and_block_quant_backward_kernel", "modulename": "linghe.utils.silu", "qualname": "batch_weighted_silu_and_block_quant_backward_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">g_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">x_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">weight_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">count_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">accum_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dx_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dx_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_dx_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_dx_scale_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">dw_ptr</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ROUND</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward", "modulename": "linghe.utils.silu", "qualname": "triton_batch_weighted_silu_and_block_quant_backward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">g</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">weight</span>, </span><span class=\"param\"><span class=\"n\">counts</span>, </span><span class=\"param\"><span class=\"n\">splits</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose", "modulename": "linghe.utils.transpose", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, {"fullname": "linghe.utils.transpose.deprecated_transpose_kernel", "modulename": "linghe.utils.transpose", "qualname": "deprecated_transpose_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">t_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">EVEN</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.triton_depracated_transpose", "modulename": "linghe.utils.transpose", "qualname": "triton_depracated_transpose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.transpose_kernel", "modulename": "linghe.utils.transpose", "qualname": "transpose_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">t_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">EVEN</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.transpose_dim_0_1_kernel", "modulename": "linghe.utils.transpose", "qualname": "transpose_dim_0_1_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">t_ptr</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">b_stride</span>, </span><span class=\"param\"><span class=\"n\">m_stride</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.triton_transpose", "modulename": "linghe.utils.transpose", "qualname": "triton_transpose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">dim0</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">dim1</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.transpose_and_pad_kernel", "modulename": "linghe.utils.transpose", "qualname": "transpose_and_pad_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">t_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">P</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">EVEN</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.triton_transpose_and_pad", "modulename": "linghe.utils.transpose", "qualname": "triton_transpose_and_pad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pad</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.batch_transpose_kernel", "modulename": "linghe.utils.transpose", "qualname": "batch_transpose_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs_ptr</span>, </span><span class=\"param\"><span class=\"n\">xts_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.triton_batch_transpose", "modulename": "linghe.utils.transpose", "qualname": "triton_batch_transpose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs</span>, </span><span class=\"param\"><span class=\"n\">xts</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.batch_transpose_and_pad_kernel", "modulename": "linghe.utils.transpose", "qualname": "batch_transpose_and_pad_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">t_ptr</span>, </span><span class=\"param\"><span class=\"n\">count_ptr</span>, </span><span class=\"param\"><span class=\"n\">accum_ptr</span>, </span><span class=\"param\"><span class=\"n\">pad_accum_ptr</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.triton_batch_transpose_and_pad", "modulename": "linghe.utils.transpose", "qualname": "triton_batch_transpose_and_pad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">count_list</span>, </span><span class=\"param\"><span class=\"n\">x_t</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pad</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.configs", "modulename": "linghe.utils.transpose", "qualname": "configs", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;, &lt;triton.Config object&gt;]"}, {"fullname": "linghe.utils.transpose.opt_transpose_kernel", "modulename": "linghe.utils.transpose", "qualname": "opt_transpose_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_ptr</span>, </span><span class=\"param\"><span class=\"n\">t_ptr</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">N</span>, </span><span class=\"param\"><span class=\"n\">D</span>, </span><span class=\"param\"><span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "linghe.utils.transpose.triton_opt_transpose", "modulename": "linghe.utils.transpose", "qualname": "triton_opt_transpose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();