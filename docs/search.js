window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"linghe": {"fullname": "linghe", "modulename": "linghe", "kind": "module", "doc": "<p></p>\n"}, "linghe.facade": {"fullname": "linghe.facade", "modulename": "linghe.facade", "kind": "module", "doc": "<p></p>\n"}, "linghe.facade.add": {"fullname": "linghe.facade.add", "modulename": "linghe.facade.add", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.facade.add.inplace_add": {"fullname": "linghe.facade.add.inplace_add", "modulename": "linghe.facade.add", "qualname": "inplace_add", "kind": "function", "doc": "<p>inplace add y to x with mix precise</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  to be updated</li>\n<li><strong>y:</strong>  add to x</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>updated x tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.facade.fp32_gemm": {"fullname": "linghe.facade.fp32_gemm", "modulename": "linghe.facade.fp32_gemm", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.facade.fp32_gemm.fp32_gemm": {"fullname": "linghe.facade.fp32_gemm.fp32_gemm", "modulename": "linghe.facade.fp32_gemm", "qualname": "fp32_gemm", "kind": "function", "doc": "<p>gemm with bf16/fp16 inputs and float32 output,\ncurrently used in MoE router gemm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>input:</strong>  bf16/fp16 activation tensor</li>\n<li><strong>weight:</strong>  bf16/fp16 weight tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>output of gemm</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.facade.hadamard_quant_linear": {"fullname": "linghe.facade.hadamard_quant_linear", "modulename": "linghe.facade.hadamard_quant_linear", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"fullname": "linghe.facade.hadamard_quant_linear.HadamardQuantLinear", "modulename": "linghe.facade.hadamard_quant_linear", "qualname": "HadamardQuantLinear", "kind": "class", "doc": "<p>a naive implementation of hadamard transformation and quantization</p>\n", "bases": "torch.nn.modules.module.Module"}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"fullname": "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__", "modulename": "linghe.facade.hadamard_quant_linear", "qualname": "HadamardQuantLinear.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_features:</strong>  in feature number</li>\n<li><strong>out_features:</strong>  out feature number</li>\n<li><strong>bias:</strong>  whether use bias</li>\n<li><strong>device:</strong>  weight device</li>\n<li><strong>dtype:</strong>  weight dtype</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">in_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">out_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "linghe.facade.loss": {"fullname": "linghe.facade.loss", "modulename": "linghe.facade.loss", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.facade.loss.softmax_cross_entropy": {"fullname": "linghe.facade.loss.softmax_cross_entropy", "modulename": "linghe.facade.loss", "qualname": "softmax_cross_entropy", "kind": "function", "doc": "<p>softmax cross entropy</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>logits:</strong>  logits tensor, shape [...,dim]</li>\n<li><strong>labels:</strong>  labels tensor, shape [...]</li>\n<li><strong>inplace:</strong>  update gradient in the <code>logits</code> tensor if True</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a tensor of per token loss</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logits</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.facade.norm": {"fullname": "linghe.facade.norm", "modulename": "linghe.facade.norm", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.facade.norm.rms_norm": {"fullname": "linghe.facade.norm.rms_norm", "modulename": "linghe.facade.norm", "qualname": "rms_norm", "kind": "function", "doc": "<p>rms norm of x with weight</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  activation tensor</li>\n<li><strong>weight:</strong>  weight tensor</li>\n<li><strong>eps:</strong>  epsilon for RMS</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>rms output</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.facade.norm.group_rms_norm_gate": {"fullname": "linghe.facade.norm.group_rms_norm_gate", "modulename": "linghe.facade.norm", "qualname": "group_rms_norm_gate", "kind": "function", "doc": "<p>return group_rms_norm(transpose(attn_output, [0,1]), weight) * sigmoid(gate)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>attn_output:</strong>  output of core attn, shape [bs, length, n_heads, head_dim]</li>\n<li><strong>gate:</strong>  gate tensor for attention output, shape [length, bs, dim]</li>\n<li><strong>weight:</strong>  weight of RMS norm, shape [dim]</li>\n<li><strong>eps:</strong>  epsilon for RMS</li>\n<li><strong>group_size:</strong>  group size of group RMS norm</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>output with shape [length, bs, dim]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attn_output</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">gate</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.facade.rope": {"fullname": "linghe.facade.rope", "modulename": "linghe.facade.rope", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.facade.rope.qk_norm_half_rope": {"fullname": "linghe.facade.rope.qk_norm_half_rope", "modulename": "linghe.facade.rope", "qualname": "qk_norm_half_rope", "kind": "function", "doc": "<p>split qkv to q/k/v, apply qk norm and half rope to q/k, transpose q/k/v to flash-attention layout</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>qkv:</strong>  QKV tensor with size of [S, B, dim], heads are interleaved</li>\n<li><strong>q_norm_weight:</strong>  rms norm weight for query</li>\n<li><strong>k_norm_weight:</strong>  rms norm weight for key</li>\n<li><strong>freqs:</strong>  Freqs tensor based on half dim.</li>\n<li><strong>H:</strong>  Number of attention heads.</li>\n<li><strong>h:</strong>  Number of key/value heads.</li>\n<li><strong>eps:</strong>  epsilon value for L2 normalization.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>qo: shape [B, S, H, head_dim]</li>\n  <li>ko: shape [B, S, h, head_dim]</li>\n  <li>vo: shape [B, S, h, head_dim]</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">qkv</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">q_norm_weight</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">k_norm_weight</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">freqs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">H</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>,</span><span class=\"param\">\t<span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.facade.smooth_quant_linear": {"fullname": "linghe.facade.smooth_quant_linear", "modulename": "linghe.facade.smooth_quant_linear", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"fullname": "linghe.facade.smooth_quant_linear.SmoothQuantLinear", "modulename": "linghe.facade.smooth_quant_linear", "qualname": "SmoothQuantLinear", "kind": "class", "doc": "<p>a naive implementation of smooth quantization linear</p>\n", "bases": "torch.nn.modules.module.Module"}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"fullname": "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__", "modulename": "linghe.facade.smooth_quant_linear", "qualname": "SmoothQuantLinear.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_features:</strong>  in feature number</li>\n<li><strong>out_features:</strong>  out feature number</li>\n<li><strong>bias:</strong>  whether use bias</li>\n<li><strong>device:</strong>  weight device</li>\n<li><strong>dtype:</strong>  weight dtype</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">in_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">out_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "linghe.facade.transpose": {"fullname": "linghe.facade.transpose", "modulename": "linghe.facade.transpose", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.facade.transpose.transpose_dim01": {"fullname": "linghe.facade.transpose.transpose_dim01", "modulename": "linghe.facade.transpose", "qualname": "transpose_dim01", "kind": "function", "doc": "<p>transpose a tensor with the first two dims, x.ndims should not greater than 4</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a transposed tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.gemm": {"fullname": "linghe.gemm", "modulename": "linghe.gemm", "kind": "module", "doc": "<p></p>\n"}, "linghe.gemm.blockwise_fp8_gemm": {"fullname": "linghe.gemm.blockwise_fp8_gemm", "modulename": "linghe.gemm.blockwise_fp8_gemm", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.gemm.channelwise_fp8_gemm": {"fullname": "linghe.gemm.channelwise_fp8_gemm", "modulename": "linghe.gemm.channelwise_fp8_gemm", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"fullname": "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm", "modulename": "linghe.gemm.channelwise_fp8_gemm", "qualname": "triton_scaled_mm", "kind": "function", "doc": "<p>similar to torch._scaled_mm, support accumulating gemm output to c\n    and low precision output tensor</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a:</strong>  left fp8 tensor</li>\n<li><strong>b:</strong>  right fp8 tensor, column-major</li>\n<li><strong>a_scale:</strong>  fp32 scale of a</li>\n<li><strong>b_scale:</strong>  fp32 scale of b</li>\n<li><strong>out_dtype:</strong>  output tensor dtype</li>\n<li><strong>c:</strong>  output tensor</li>\n<li><strong>accum:</strong>  accumulate output on c if True</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>c: output tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">a_scale</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">b_scale</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">out_dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float32</span>,</span><span class=\"param\">\t<span class=\"n\">c</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">accum</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.gemm.fp32_gemm": {"fullname": "linghe.gemm.fp32_gemm", "modulename": "linghe.gemm.fp32_gemm", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"fullname": "linghe.gemm.fp32_gemm.triton_fp32_gemm", "modulename": "linghe.gemm.fp32_gemm", "qualname": "triton_fp32_gemm", "kind": "function", "doc": "<p>return fp32 gemm result with fp16/bf16 inputs,\n    it's mainly used for MoE router GEMM\n    and DO NOT suitable for large size GEMM</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a:</strong>  left matrix with fp16/bf16 precision</li>\n<li><strong>b:</strong>  right matrix with fp16/bf16 precision</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>c: output with fp32 precision</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"fullname": "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward", "modulename": "linghe.gemm.fp32_gemm", "qualname": "triton_fp32_gemm_for_backward", "kind": "function", "doc": "<p>mix precision gemm for backward, a@b.float()</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a:</strong>  input gradient, fp32</li>\n<li><strong>b:</strong>  gemm weight, bf16/fp16</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>c: gradient of activation</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"fullname": "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update", "modulename": "linghe.gemm.fp32_gemm", "qualname": "triton_fp32_gemm_for_update", "kind": "function", "doc": "<p>mix precision gemm for updaing weight</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a:</strong>  gradient of output, fp32</li>\n<li><strong>b:</strong>  input activation, bf16/fp16</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>c: gradient of weight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"fullname": "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm", "modulename": "linghe.gemm.fp32_gemm", "qualname": "triton_scaled_fp32_gemm", "kind": "function", "doc": "<p>c = (a<em>scale[:,None])</em>b\nthis kernel is used to fuse RMSNorm and quantization in MoE layer\nnative implementation:\n    y = rms_norm(x),\n    y_q = quantization(y),\n    router_logits = y@w\nwe can not fuse rms_norm and quantization\nas we still need bf16 y for moe router gemm\nfused implementation:\n    y_q, rms = quantization(rms_norm(x))\n    router_logits = (x/rms)@y\nso we need a scaled fp32 gemm kernel</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a:</strong>  activation tensor</li>\n<li><strong>b:</strong>   weight tensor</li>\n<li><strong>scale:</strong>  scale for activation tensor, 1/rms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>output tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"fullname": "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update", "modulename": "linghe.gemm.fp32_gemm", "qualname": "triton_scaled_fp32_gemm_for_update", "kind": "function", "doc": "<p>see triton_scaled_fp32_gemm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a:</strong>  y</li>\n<li><strong>b:</strong>  activation before RMS norm</li>\n<li><strong>scale:</strong>  1/rms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dw</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.quant": {"fullname": "linghe.quant", "modulename": "linghe.quant", "kind": "module", "doc": "<p></p>\n"}, "linghe.quant.block": {"fullname": "linghe.quant.block", "modulename": "linghe.quant.block", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.quant.block.triton_block_quant": {"fullname": "linghe.quant.block.triton_block_quant", "modulename": "linghe.quant.block", "qualname": "triton_block_quant", "kind": "function", "doc": "<p>blockwise quantize x</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>block_size:</strong>  block wise</li>\n<li><strong>round_scale:</strong>  whether round scale to power of 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>y: quantized tensor, float8_e4m3fn</li>\n  <li>s: quantization scale, float32</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">block_size</span><span class=\"o\">=</span><span class=\"mi\">128</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.quant.channel": {"fullname": "linghe.quant.channel", "modulename": "linghe.quant.channel", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.quant.channel.triton_row_quant": {"fullname": "linghe.quant.channel.triton_row_quant", "modulename": "linghe.quant.channel", "qualname": "triton_row_quant", "kind": "function", "doc": "<p>rowwise quantize x</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input x</li>\n<li><strong>round_scale:</strong>  whether round scale to power of 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>x_q: quantized tensor\n  x_scale: quantization scale</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.quant.channel.triton_tokenwise_row_quant": {"fullname": "linghe.quant.channel.triton_tokenwise_row_quant", "modulename": "linghe.quant.channel", "qualname": "triton_tokenwise_row_quant", "kind": "function", "doc": "<p>rowwise quantize x with power of 2 dim size</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input x</li>\n<li><strong>round_scale:</strong>  whether round scale to power of 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>out: quantized tensor\n  scale: quantization scale</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.quant.channel.triton_transpose_row_quant": {"fullname": "linghe.quant.channel.triton_transpose_row_quant", "modulename": "linghe.quant.channel", "qualname": "triton_transpose_row_quant", "kind": "function", "doc": "<p>transpose x and row quantize x</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input x</li>\n<li><strong>round_scale:</strong>  whether round scale to power of 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>x_q: quantized tensor</li>\n  <li>x_scale: quantization scale</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.quant.group": {"fullname": "linghe.quant.group", "modulename": "linghe.quant.group", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.quant.group.triton_group_quant": {"fullname": "linghe.quant.group.triton_group_quant", "modulename": "linghe.quant.group", "qualname": "triton_group_quant", "kind": "function", "doc": "<p>groupwise quantize x, group is in under rowwise format</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>group_size:</strong>  group wise</li>\n<li><strong>round_scale:</strong>  whether round scale to power of 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>y: quantized tensor, float8_e4m3fn</li>\n  <li>s: quantization scale, float32</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float8_e4m3fn</span>, </span><span class=\"param\"><span class=\"n\">group_size</span><span class=\"o\">=</span><span class=\"mi\">128</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.quant.hadamard": {"fullname": "linghe.quant.hadamard", "modulename": "linghe.quant.hadamard", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.quant.hadamard.triton_hadamard_quant": {"fullname": "linghe.quant.hadamard.triton_hadamard_quant", "modulename": "linghe.quant.hadamard", "qualname": "triton_hadamard_quant", "kind": "function", "doc": "<p>apply hadamard transformation and then quantize transformed tensor</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>hm:</strong>  hamadard matrix</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>x_q: rowwise quantized tensor of non-transposed x</li>\n  <li>x_scale: rowwise quantization scale of non-transposed x</li>\n  <li>xt_q: columnwise quantized tensor of transposed x</li>\n  <li>xt_scale: columnwise quantization scale of transposed x</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">hm</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.quant.smooth": {"fullname": "linghe.quant.smooth", "modulename": "linghe.quant.smooth", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils": {"fullname": "linghe.utils", "modulename": "linghe.utils", "kind": "module", "doc": "<p></p>\n"}, "linghe.utils.add": {"fullname": "linghe.utils.add", "modulename": "linghe.utils.add", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils.add.triton_inplace_add": {"fullname": "linghe.utils.add.triton_inplace_add", "modulename": "linghe.utils.add", "qualname": "triton_inplace_add", "kind": "function", "doc": "<p>inplace add y to x</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  Tensor</li>\n<li><strong>y:</strong>  Tensor</li>\n<li><strong>accum:</strong>  x += y if accum=True else x.copy_(y)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>updated x</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">accum</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.dot": {"fullname": "linghe.utils.dot", "modulename": "linghe.utils.dot", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils.dot.triton_dot": {"fullname": "linghe.utils.dot.triton_dot", "modulename": "linghe.utils.dot", "qualname": "triton_dot", "kind": "function", "doc": "<p>vector dot multiply, output = sum(x*y, 1),\nit is used to calculate gradient of router weight</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong> </li>\n<li><strong>y:</strong> </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>output of sum(x*y, 1)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.gather": {"fullname": "linghe.utils.gather", "modulename": "linghe.utils.gather", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils.gather.triton_make_row_id_map": {"fullname": "linghe.utils.gather.triton_make_row_id_map", "modulename": "linghe.utils.gather", "qualname": "triton_make_row_id_map", "kind": "function", "doc": "<p>make row id map, values in the tensor are the row indices</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>routing_map:</strong>  a tensor of 0/1 values, 1 indicates routed</li>\n<li><strong>multiple_of:</strong>  padding the tokens of each expert to multiple of this value</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>row id map with shape [n_tokens, n_experts]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">routing_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">multiple_of</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"fullname": "linghe.utils.gather.triton_make_row_id_map_and_indices", "modulename": "linghe.utils.gather", "qualname": "triton_make_row_id_map_and_indices", "kind": "function", "doc": "<p>similar with triton_make_row_id_map, but output an indices tensor as well</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>routing_map:</strong>  [n_tokens, n_experts]</li>\n<li><strong>num_out_tokens:</strong>  sum(round_up_to(n_tokens, multiple_of))</li>\n<li><strong>multiple_of:</strong>  padding the tokens of each expert to this value</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>row_in_map: [n_tokens, n_experts]\n  row_indices: [num_out_tokens]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">routing_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">num_out_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">multiple_of</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.gather.triton_index_select": {"fullname": "linghe.utils.gather.triton_index_select", "modulename": "linghe.utils.gather", "qualname": "triton_index_select", "kind": "function", "doc": "<p>index select for quantized tensor</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  [bs, dim]</li>\n<li><strong>indices:</strong>  [K]</li>\n<li><strong>scale:</strong>  [bs]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>out: output of selected x\n  scale_out: scale of selected scale</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">indices</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scale_out</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.gather.triton_permute_with_mask_map": {"fullname": "linghe.utils.gather.triton_permute_with_mask_map", "modulename": "linghe.utils.gather", "qualname": "triton_permute_with_mask_map", "kind": "function", "doc": "<p>gather quantized tensor with row id map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inp:</strong>  [num_tokens, hidden_size], rowwise quantized tensor</li>\n<li><strong>scale:</strong>  [num_tokens], quantization scale</li>\n<li><strong>probs:</strong>  router prob, used as weight</li>\n<li><strong>row_id_map:</strong>  [n_experts, num_tokens]\nindex &gt;= 0: row index of output tensor\nindex == -1: ignore\nNote: index may not be contiguous</li>\n<li><strong>num_out_tokens:</strong>  output token count, including padding tokens</li>\n<li><strong>contiguous:</strong>  whether indices in row_id_map is contiguous,\nFalse means padded</li>\n<li><strong>tokens_per_expert:</strong>  [num_experts], token count per expert,\nnon-blocking cuda tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>output: permuted quantized tensor\n  permuted_scale: permuted quantization scale\n  permuted_probs: permuted router prob</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">inp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">probs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">row_id_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_out_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">contiguous</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">tokens_per_expert</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"fullname": "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices", "modulename": "linghe.utils.gather", "qualname": "triton_batch_transpose_smooth_permute_with_indices", "kind": "function", "doc": "<p>used for smooth quantization backward in megatron 0.12,\nx is gathered, requantized, padded to multiple of 32 and tranposed</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  dy, [bs, dim], it is smooth quantized</li>\n<li><strong>scale:</strong>  [bs], quantized scale</li>\n<li><strong>org_smooth_scale:</strong>  [dim]</li>\n<li><strong>smooth_scales:</strong>  [n_experts, dim]</li>\n<li><strong>indices:</strong>  [sum(tokens_per_experts)]</li>\n<li><strong>token_count_per_expert:</strong>  [n_experts], tensor of token count per expert</li>\n<li><strong>splits:</strong>  [n_experts], list of token_count_per_expert</li>\n<li><strong>round_scale:</strong>  round quantization scale to power of 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>x_q: [sum(roundup(tokens_per_experts)) * dim]\n  x_scale: [sum(roundup(tokens_per_experts))]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span>,</span><span class=\"param\">\t<span class=\"n\">org_smooth_scale</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scales</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span>,</span><span class=\"param\">\t<span class=\"n\">token_count_per_expert</span>,</span><span class=\"param\">\t<span class=\"n\">splits</span>,</span><span class=\"param\">\t<span class=\"n\">x_q</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"fullname": "linghe.utils.gather.triton_smooth_weighted_permute_with_indices", "modulename": "linghe.utils.gather", "qualname": "triton_smooth_weighted_permute_with_indices", "kind": "function", "doc": "<p>select and smooth and quant, used in megatron 0.11 all2all moe</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>grads:</strong>  [bs, dim]</li>\n<li><strong>tokens:</strong>  [bs, dim]</li>\n<li><strong>smooth_scales:</strong>  [n_experts, dim]</li>\n<li><strong>token_count_per_expert:</strong>  [n_experts]</li>\n<li><strong>indices:</strong>  [n_experts*topk]</li>\n<li><strong>reverse:</strong>  whether scale is 1/scale</li>\n<li><strong>round_scale:</strong>  whether round scale to power of 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>x_q: [bs*topk, dim]\n  x_scale: [bs<em>topk]\n  x_sum: [bs</em>topk]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grads</span>,</span><span class=\"param\">\t<span class=\"n\">tokens</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scales</span>,</span><span class=\"param\">\t<span class=\"n\">token_count_per_expert</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span>,</span><span class=\"param\">\t<span class=\"n\">x_q</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_sum</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"fullname": "linghe.utils.gather.triton_smooth_permute_with_indices", "modulename": "linghe.utils.gather", "qualname": "triton_smooth_permute_with_indices", "kind": "function", "doc": "<p>select and smooth and quant</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>grad_data:</strong>  [bs, dim]</li>\n<li><strong>grad_scale:</strong>  [bs]</li>\n<li><strong>smooth_scales:</strong>  [n_experts, dim]</li>\n<li><strong>token_count_per_expert:</strong>  [n_experts]</li>\n<li><strong>indices:</strong>  [n_experts*topk]</li>\n<li><strong>x_q:</strong>  [bs*topk, dim]</li>\n<li><strong>x_scale:</strong>  [bs*topk]</li>\n<li><strong>reverse:</strong> </li>\n<li><strong>round_scale:</strong> </li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grad_data</span>,</span><span class=\"param\">\t<span class=\"n\">grad_scale</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scales</span>,</span><span class=\"param\">\t<span class=\"n\">token_count_per_expert</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span>,</span><span class=\"param\">\t<span class=\"n\">x_q</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"fullname": "linghe.utils.gather.triton_smooth_permute_with_mask_map", "modulename": "linghe.utils.gather", "qualname": "triton_smooth_permute_with_mask_map", "kind": "function", "doc": "<p>gather ( and optional dequant) and smooth quant</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inp:</strong>  [num_tokens, hidden_size], rowwise quantized tensor</li>\n<li><strong>row_id_map:</strong>  [n_experts, num_tokens], indices</li>\n<li><strong>scale:</strong>  [num_tokens, hs], rowwise_scale_inv, optional</li>\n<li><strong>num_tokens:</strong>  [n_experts]</li>\n<li><strong>num_experts:</strong> </li>\n<li><strong>num_out_tokens:</strong> </li>\n<li><strong>hidden_size:</strong> </li>\n<li><strong>smooth_scales:</strong>  [n_experts, hidden_size]</li>\n<li><strong>reverse:</strong> </li>\n<li><strong>round_scale:</strong> </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>output: output tensor</li>\n  <li>permuted_scale: permuted scale if scale is not None</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">inp</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">row_id_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_experts</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_out_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">hidden_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_scales</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.loss": {"fullname": "linghe.utils.loss", "modulename": "linghe.utils.loss", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"fullname": "linghe.utils.loss.triton_softmax_cross_entropy_forward", "modulename": "linghe.utils.loss", "qualname": "triton_softmax_cross_entropy_forward", "kind": "function", "doc": "<p>compute token-wise softmax cross entropy loss</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>logits:</strong>  logits tensor</li>\n<li><strong>labels:</strong>  labels tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>loss of each token</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logits</span>, </span><span class=\"param\"><span class=\"n\">labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"fullname": "linghe.utils.loss.triton_softmax_cross_entropy_backward", "modulename": "linghe.utils.loss", "qualname": "triton_softmax_cross_entropy_backward", "kind": "function", "doc": "<p>backward of softmax cross entropy loss</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>logits:</strong>  logit tensor, [bs, dim]</li>\n<li><strong>labels:</strong>  label tensor, [bs]</li>\n<li><strong>sum_exp:</strong>   [bs]</li>\n<li><strong>max_logit:</strong>  [bs]</li>\n<li><strong>input_grad:</strong>  gradient, [bs, dim]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>output_grad: [bs, dim]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logits</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">sum_exp</span>, </span><span class=\"param\"><span class=\"n\">max_logit</span>, </span><span class=\"param\"><span class=\"n\">input_grad</span>, </span><span class=\"param\"><span class=\"n\">output_grad</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.norm": {"fullname": "linghe.utils.norm", "modulename": "linghe.utils.norm", "kind": "module", "doc": "<p></p>\n"}, "linghe.utils.norm.triton_rms_norm_forward": {"fullname": "linghe.utils.norm.triton_rms_norm_forward", "modulename": "linghe.utils.norm", "qualname": "triton_rms_norm_forward", "kind": "function", "doc": "<p>rms norm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>weight:</strong>  weight of rms norm</li>\n<li><strong>eps:</strong>  epsilon of rms norm</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>out: output tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">weight</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"fullname": "linghe.utils.norm.triton_rms_norm_and_block_quant_forward", "modulename": "linghe.utils.norm", "qualname": "triton_rms_norm_and_block_quant_forward", "kind": "function", "doc": "<p>Fused RMSNorm forward and block quantization.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  Input tensor, shape [M, N]</li>\n<li><strong>weight:</strong>  RMSNorm weight,  shape [N]</li>\n<li><strong>eps:</strong>  epsilon value for L2 normalization.</li>\n<li><strong>out:</strong>  output of quantization data</li>\n<li><strong>scale:</strong>  output of quantization scale.</li>\n<li><strong>rms:</strong>  output of rms</li>\n<li><strong>round_scale:</strong>  Set whether to force power of 2 scales.</li>\n<li><strong>output_mode:</strong>  one of {0, 1, 2}.\n0: only output non-transpose tensor\n1: only output transposed tensor\n2: return both</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>out: quantization data.</li>\n  <li>scale: quantization scale.</li>\n  <li>rms: Reciprocal of the root mean square of the\n  input calculated over the last dimension.</li>\n  <li>transpose_output: quantization data of transposed gradient.</li>\n  <li>transpose_scale: quantization scale of transposed gradient.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">output_mode</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"fullname": "linghe.utils.norm.triton_group_rms_norm_gate_forward", "modulename": "linghe.utils.norm", "qualname": "triton_group_rms_norm_gate_forward", "kind": "function", "doc": "<p>norm and gate in linear attention</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  output of attn, [bs, length, n_heads, head_dim]</li>\n<li><strong>gate:</strong>  gate tensor, [length, bs, dim] if transpose=True else [bs, length, dim]</li>\n<li><strong>weight:</strong>  rms norm weight, [dim]</li>\n<li><strong>eps:</strong>  epsilon of rms norm</li>\n<li><strong>group_size:</strong>  group size of group rms norm</li>\n<li><strong>transpose:</strong>  whether gate is transposed and output will be transposed</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>output tensor, [length, bs, dim] if transpose=True else [bs, length, dim]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">gate</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>,</span><span class=\"param\">\t<span class=\"n\">group_size</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">transpose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.rearange": {"fullname": "linghe.utils.rearange", "modulename": "linghe.utils.rearange", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils.rearange.triton_split_and_cat": {"fullname": "linghe.utils.rearange.triton_split_and_cat", "modulename": "linghe.utils.rearange", "qualname": "triton_split_and_cat", "kind": "function", "doc": "<p>split x to multiple tensors and cat with indices,\nit is used for permutation in moe</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  [bs, dim]</li>\n<li><strong>counts:</strong>  [n_split]</li>\n<li><strong>indices:</strong>  [n_split]</li>\n<li><strong>scales:</strong>  [bs]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>y: output tensor</li>\n  <li>output_scales: output scales if scales is not None</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">counts</span>, </span><span class=\"param\"><span class=\"n\">indices</span>, </span><span class=\"param\"><span class=\"n\">scales</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.reduce": {"fullname": "linghe.utils.reduce", "modulename": "linghe.utils.reduce", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils.reduce.triton_abs_max": {"fullname": "linghe.utils.reduce.triton_abs_max", "modulename": "linghe.utils.reduce", "qualname": "triton_abs_max", "kind": "function", "doc": "<p>columnwise abs max of x, it is used in smooth quantization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor, may be quantized tensor</li>\n<li><strong>scale:</strong>  quantization scale if x is quantized</li>\n<li><strong>smooth_scale:</strong>  optional smooth scale</li>\n<li><strong>min_value:</strong>  output = max(max(abs(x,0)), min_value)</li>\n<li><strong>axis:</strong>  reduce axis</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>max tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">smooth_scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">min_value</span><span class=\"o\">=</span><span class=\"mf\">1e-30</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.reduce.triton_batch_count_zero": {"fullname": "linghe.utils.reduce.triton_batch_count_zero", "modulename": "linghe.utils.reduce", "qualname": "triton_batch_count_zero", "kind": "function", "doc": "<p>count zero in tensor list, it is used to monitor zeros in gradient tensor</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>xs:</strong>  input tensors</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a single-value int64 tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"fullname": "linghe.utils.reduce.triton_batch_sum_with_ord", "modulename": "linghe.utils.reduce", "qualname": "triton_batch_sum_with_ord", "kind": "function", "doc": "<p>return sum(abs(x)**ord).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>xs:</strong>  Tensor lists.</li>\n<li><strong>ord:</strong>  the order of tensor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a single-value fp32 tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs</span>, </span><span class=\"param\"><span class=\"nb\">ord</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.rope": {"fullname": "linghe.utils.rope", "modulename": "linghe.utils.rope", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils.rope.triton_half_rope_forward": {"fullname": "linghe.utils.rope.triton_half_rope_forward", "modulename": "linghe.utils.rope", "qualname": "triton_half_rope_forward", "kind": "function", "doc": "<p>apply norm to qk, then apply half rope to qk</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>q:</strong>  query tensor, [len, bs, q_head, head_dim]</li>\n<li><strong>k:</strong>  key tensor, [len, bs, kv_head, head_dim]</li>\n<li><strong>freqs:</strong>  rope freqs</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>qo: query output</li>\n  <li>ko: key output</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">freqs</span>, </span><span class=\"param\"><span class=\"n\">transposed</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"fullname": "linghe.utils.rope.triton_qk_norm_and_half_rope_forward", "modulename": "linghe.utils.rope", "qualname": "triton_qk_norm_and_half_rope_forward", "kind": "function", "doc": "<p>split qkv to q/k/v, apply qk norm and half rope to q/k,\n    transpose q/k/v to flash-attention layout</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>qkv:</strong>  QKV tensor with size of [S, B, dim], heads are interleaved</li>\n<li><strong>q_norm_weight:</strong>  rms norm weight for query</li>\n<li><strong>k_norm_weight:</strong>  rms norm weight for key</li>\n<li><strong>freqs:</strong>  Freqs tensor based on half dim.</li>\n<li><strong>H:</strong>  Number of attention heads.</li>\n<li><strong>h:</strong>  Number of key/value heads.</li>\n<li><strong>eps:</strong>  epsilon value for L2 normalization.</li>\n<li><strong>interleaved:</strong>  whether head of qkv is interleaved,\ninterleaved: [q...qkvq...qkv]\nnon-interleaved: [q...qk...kv...v]</li>\n<li><strong>transposed:</strong>  whether qkv is tranposed\ntransposed: [S, B, dim]\nnon-transposed: [B, S, dim]\nonly support transpose format currently</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>qo: shape [B, S, H, head_dim]</li>\n  <li>ko: shape [B, S, h, head_dim]</li>\n  <li>vo: shape [B, S, h, head_dim]</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">qkv</span>,</span><span class=\"param\">\t<span class=\"n\">q_norm_weight</span>,</span><span class=\"param\">\t<span class=\"n\">k_norm_weight</span>,</span><span class=\"param\">\t<span class=\"n\">freqs</span>,</span><span class=\"param\">\t<span class=\"n\">H</span><span class=\"o\">=</span><span class=\"mi\">32</span>,</span><span class=\"param\">\t<span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>,</span><span class=\"param\">\t<span class=\"n\">interleaved</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">transposed</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"fullname": "linghe.utils.rope.triton_qk_norm_and_half_rope_backward", "modulename": "linghe.utils.rope", "qualname": "triton_qk_norm_and_half_rope_backward", "kind": "function", "doc": "<p>backward kernel of triton_qk_norm_and_half_rope_forward</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>gq:</strong>  gradient of qo, [len, bs, q_head, head_dim]</li>\n<li><strong>gk:</strong>  gradient of ko, [len, bs, q_head, head_dim]</li>\n<li><strong>gv:</strong>  gradient of vo, [len, bs, q_head, head_dim]</li>\n<li><strong>qkv:</strong>  input qkv</li>\n<li><strong>q_norm_weight:</strong> </li>\n<li><strong>k_norm_weight:</strong> </li>\n<li><strong>freqs:</strong> </li>\n<li><strong>eps:</strong> </li>\n<li><strong>interleaved:</strong> </li>\n<li><strong>transposed:</strong> </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>dqkv: gradient of qkv</li>\n  <li>dqw: gradient of q_norm_weight</li>\n  <li>dkw: gradient of k_norm_weight</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gq</span>,</span><span class=\"param\">\t<span class=\"n\">gk</span>,</span><span class=\"param\">\t<span class=\"n\">gv</span>,</span><span class=\"param\">\t<span class=\"n\">qkv</span>,</span><span class=\"param\">\t<span class=\"n\">q_norm_weight</span>,</span><span class=\"param\">\t<span class=\"n\">k_norm_weight</span>,</span><span class=\"param\">\t<span class=\"n\">freqs</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>,</span><span class=\"param\">\t<span class=\"n\">interleaved</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">transposed</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.scatter": {"fullname": "linghe.utils.scatter", "modulename": "linghe.utils.scatter", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils.scatter.triton_aligned_scatter_add": {"fullname": "linghe.utils.scatter.triton_aligned_scatter_add", "modulename": "linghe.utils.scatter", "qualname": "triton_aligned_scatter_add", "kind": "function", "doc": "<p>scatter_add for megatron 0.11</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>outputs:</strong>   output tensor</li>\n<li><strong>indices:</strong>   gather indices</li>\n<li><strong>weights:</strong>   rowwise weight, it is router prob in MoE router</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>output tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">weights</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.scatter.triton_scatter_add": {"fullname": "linghe.utils.scatter.triton_scatter_add", "modulename": "linghe.utils.scatter", "qualname": "triton_scatter_add", "kind": "function", "doc": "<p>naive version of scatter add, very slow</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>outputs:</strong>  output tensor</li>\n<li><strong>indices:</strong>  indices</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>output tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">outputs</span>, </span><span class=\"param\"><span class=\"n\">indices</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"fullname": "linghe.utils.scatter.triton_unpermute_with_mask_map", "modulename": "linghe.utils.scatter", "qualname": "triton_unpermute_with_mask_map", "kind": "function", "doc": "<p>scatter add with row id map</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>grad:</strong>  gradient tensor, [num_out_tokens, hidden_size]</li>\n<li><strong>row_id_map:</strong>  row id map, [n_experts, num_tokens]</li>\n<li><strong>probs:</strong>  [num_out_tokens]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>output: [num_tokens, hidden_size]</li>\n  <li>restore_probs: [num_tokens, num_experts]</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grad</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">row_id_map</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">probs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.silu": {"fullname": "linghe.utils.silu", "modulename": "linghe.utils.silu", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils.silu.triton_weighted_silu_forward": {"fullname": "linghe.utils.silu.triton_weighted_silu_forward", "modulename": "linghe.utils.silu", "qualname": "triton_weighted_silu_forward", "kind": "function", "doc": "<p>compute silu(x)*weight, used in bf16/fp16 training with MoE</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>weight:</strong>  tokenwise weight</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>out: output tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.silu.triton_weighted_silu_backward": {"fullname": "linghe.utils.silu.triton_weighted_silu_backward", "modulename": "linghe.utils.silu", "qualname": "triton_weighted_silu_backward", "kind": "function", "doc": "<p>backward of triton_weighted_silu_forward</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>g:</strong>  gradient tensor</li>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>weight:</strong>  weight tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>dx: gradient of x</li>\n  <li>dw: gradient of weight</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"fullname": "linghe.utils.silu.triton_silu_and_block_quant_forward", "modulename": "linghe.utils.silu", "qualname": "triton_silu_and_block_quant_forward", "kind": "function", "doc": "<p>fused silu and blockwise quantization, used in shared expert</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>round_scale:</strong>  whether round scale to power of 2</li>\n<li><strong>output_mode:</strong>  one of {0, 1, 2}\n0: only output non-transposed quantized tensor\n1: only output transposed quantized tensor\n2: output both</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>out: quantized tensor</li>\n  <li>scale: quantization scale</li>\n  <li>transpose_output: quantized tensor of transposed output</li>\n  <li>transpose_scale: quantization scale of transposed output</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">output_mode</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"fullname": "linghe.utils.silu.triton_silu_and_block_quant_backward", "modulename": "linghe.utils.silu", "qualname": "triton_silu_and_block_quant_backward", "kind": "function", "doc": "<p>backward of triton_silu_and_block_quant_forward</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>g:</strong>  gradient</li>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>round_scale:</strong>  whether round to power of 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>dx: quantized non-transposed gradient</li>\n  <li>dx_scale: scales of quantization non-transposed gradient</li>\n  <li>transpose_dx: quantized transposed gradient</li>\n  <li>transpose_dx_scale: scales of quantization transposed gradient</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">g</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"fullname": "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward", "modulename": "linghe.utils.silu", "qualname": "triton_batch_weighted_silu_and_block_quant_forward", "kind": "function", "doc": "<p>silu and blockwise quantize activation in routed experts</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  activation tensor in routed experts</li>\n<li><strong>weight:</strong>  router prob tensor</li>\n<li><strong>counts:</strong>  cuda tensor of token count per expert</li>\n<li><strong>splits:</strong>  python int list of token count per expert</li>\n<li><strong>round_scale:</strong>  whether round scale to power of 2</li>\n<li><strong>output_mode:</strong>  one of {0, 1, 2}\n0: only output non-transposed quantized tensor\n1: only output transposed quantized tensor\n2: output both</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>out: quantized tensor</li>\n  <li>scale: quantization scale</li>\n  <li>transpose_output: quantized tensor of transposed output</li>\n  <li>transpose_scale: quantization scale of transposed output</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span>,</span><span class=\"param\">\t<span class=\"n\">counts</span>,</span><span class=\"param\">\t<span class=\"n\">splits</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">output_mode</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"fullname": "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward", "modulename": "linghe.utils.silu", "qualname": "triton_batch_weighted_silu_and_block_quant_backward", "kind": "function", "doc": "<p>backward of triton_batch_weighted_silu_and_block_quant_forward</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>g:</strong>  gradient</li>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>weight:</strong>  router prob tensor</li>\n<li><strong>counts:</strong>  cuda tensor of token count per expert</li>\n<li><strong>splits:</strong>  python int list of token count per expert</li>\n<li><strong>round_scale:</strong>  whether round scale to power of 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>dx: quantized non-transposed gradient</li>\n  <li>dx_scale: scales of quantization non-transposed gradient</li>\n  <li>dw: gradient of weight</li>\n  <li>transpose_dx: quantized transposed gradient</li>\n  <li>transpose_dx_scale: scales of quantization transposed gradient</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">g</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">weight</span>, </span><span class=\"param\"><span class=\"n\">counts</span>, </span><span class=\"param\"><span class=\"n\">splits</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">round_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.transpose": {"fullname": "linghe.utils.transpose", "modulename": "linghe.utils.transpose", "kind": "module", "doc": "<p>Copyright (c) Ant Financial Service Group and its affiliates.</p>\n"}, "linghe.utils.transpose.triton_transpose": {"fullname": "linghe.utils.transpose.triton_transpose", "modulename": "linghe.utils.transpose", "qualname": "triton_transpose", "kind": "function", "doc": "<p>transpose x with dim0 and dim1</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>dim0:</strong>  dim 0</li>\n<li><strong>dim1:</strong>  dim 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>transposed tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">dim0</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dim1</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.transpose.triton_transpose_and_pad": {"fullname": "linghe.utils.transpose.triton_transpose_and_pad", "modulename": "linghe.utils.transpose", "qualname": "triton_transpose_and_pad", "kind": "function", "doc": "<p>transpose x and padding the column size to be mutiplier of 32,\nit is used for calculated gradient of weight with torch._scaled__mm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  input tensor</li>\n<li><strong>out:</strong> </li>\n<li><strong>pad:</strong>  whether need padding</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>out: output tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pad</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.transpose.triton_batch_transpose": {"fullname": "linghe.utils.transpose.triton_batch_transpose", "modulename": "linghe.utils.transpose", "qualname": "triton_batch_transpose", "kind": "function", "doc": "<p>batch transpose x</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>xs:</strong>  input tensor list, [M, N]*expert</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>xts: output tensor list, [N,M]*expert</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs</span>, </span><span class=\"param\"><span class=\"n\">xts</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"fullname": "linghe.utils.transpose.triton_batch_transpose_and_pad", "modulename": "linghe.utils.transpose", "qualname": "triton_batch_transpose_and_pad", "kind": "function", "doc": "<p>transpose and pad each tensor stored in x</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  [sum(bs), N]</li>\n<li><strong>count_list:</strong>  a python list of token count</li>\n<li><strong>pad:</strong>  whether pad to mutiplier of 32,\npadding value should be filled with 0 if padded</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>x_t: output tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">count_list</span>, </span><span class=\"param\"><span class=\"n\">x_t</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pad</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}}, "docInfo": {"linghe": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "linghe.facade": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "linghe.facade.add": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.facade.add.inplace_add": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 45}, "linghe.facade.fp32_gemm": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.facade.fp32_gemm.fp32_gemm": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 51}, "linghe.facade.hadamard_quant_linear": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 10}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 47}, "linghe.facade.loss": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.facade.loss.softmax_cross_entropy": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 62}, "linghe.facade.norm": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.facade.norm.rms_norm": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 48}, "linghe.facade.norm.group_rms_norm_gate": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 93, "bases": 0, "doc": 100}, "linghe.facade.rope": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.facade.rope.qk_norm_half_rope": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 129, "bases": 0, "doc": 148}, "linghe.facade.smooth_quant_linear": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 9}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 47}, "linghe.facade.transpose": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.facade.transpose.transpose_dim01": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 43}, "linghe.gemm": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "linghe.gemm.blockwise_fp8_gemm": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.gemm.channelwise_fp8_gemm": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 111, "bases": 0, "doc": 102}, "linghe.gemm.fp32_gemm": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 66}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 46}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 45}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 114}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 45}, "linghe.quant": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "linghe.quant.block": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.quant.block.triton_block_quant": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 64}, "linghe.quant.channel": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.quant.channel.triton_row_quant": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 49}, "linghe.quant.channel.triton_tokenwise_row_quant": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 53}, "linghe.quant.channel.triton_transpose_row_quant": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 58}, "linghe.quant.group": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.quant.group.triton_group_quant": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 70}, "linghe.quant.hadamard": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.quant.hadamard.triton_hadamard_quant": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 84}, "linghe.quant.smooth": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "linghe.utils.add": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils.add.triton_inplace_add": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 53}, "linghe.utils.dot": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils.dot.triton_dot": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 52}, "linghe.utils.gather": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils.gather.triton_make_row_id_map": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 70}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"qualname": 7, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 85}, "linghe.utils.gather.triton_index_select": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 53}, "linghe.utils.gather.triton_permute_with_mask_map": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 134, "bases": 0, "doc": 144}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"qualname": 7, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 144}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 99, "bases": 0, "doc": 104}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 86}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 145, "bases": 0, "doc": 132}, "linghe.utils.loss": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 43}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 68}, "linghe.utils.norm": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "linghe.utils.norm.triton_rms_norm_forward": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 48}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"qualname": 7, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 182, "bases": 0, "doc": 174}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 111}, "linghe.utils.rearange": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils.rearange.triton_split_and_cat": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 79}, "linghe.utils.reduce": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils.reduce.triton_abs_max": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 84}, "linghe.utils.reduce.triton_batch_count_zero": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 44}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 47}, "linghe.utils.rope": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils.rope.triton_half_rope_forward": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 73}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"qualname": 7, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 192}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"qualname": 7, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 86, "bases": 0, "doc": 141}, "linghe.utils.scatter": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils.scatter.triton_aligned_scatter_add": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 83, "bases": 0, "doc": 61}, "linghe.utils.scatter.triton_scatter_add": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 47}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 75}, "linghe.utils.silu": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils.silu.triton_weighted_silu_forward": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 45}, "linghe.utils.silu.triton_weighted_silu_backward": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 59}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 104}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 87}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"qualname": 8, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 139}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"qualname": 8, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 129}, "linghe.utils.transpose": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "linghe.utils.transpose.triton_transpose": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 47}, "linghe.utils.transpose.triton_transpose_and_pad": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 66}, "linghe.utils.transpose.triton_batch_transpose": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 37}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 70}}, "length": 90, "save": true}, "index": {"qualname": {"root": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"linghe.utils.gather.triton_index_select": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 11}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "p": {"3": {"2": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 6}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "o": {"docs": {}, "df": 0, "r": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 3, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}}, "df": 9}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}}, "df": 1, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 4, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_index_select": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {"linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 6}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 5}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4}}, "w": {"docs": {"linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 5}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 8}}}}, "q": {"docs": {}, "df": 0, "k": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 3}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 11}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 7}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 47}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"0": {"1": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.dot.triton_dot": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2}}, "p": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 5}, "s": {"docs": {}, "df": 0, "k": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 3}}, "x": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 6}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 7}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 6}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 5}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 7}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 5}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 1}}}}}, "fullname": {"root": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"linghe": {"tf": 1}, "linghe.facade": {"tf": 1}, "linghe.facade.add": {"tf": 1}, "linghe.facade.add.inplace_add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.gemm": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.quant": {"tf": 1}, "linghe.quant.block": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 90}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 6}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.loss": {"tf": 1}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 5}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade": {"tf": 1}, "linghe.facade.add": {"tf": 1}, "linghe.facade.add.inplace_add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1}}, "df": 20}}}}}, "p": {"3": {"2": {"docs": {"linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1.4142135623730951}}, "df": 8}, "docs": {}, "df": 0}, "8": {"docs": {"linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "o": {"docs": {}, "df": 0, "r": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 3, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}}, "df": 9}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"linghe.facade.add": {"tf": 1}, "linghe.facade.add.inplace_add": {"tf": 1.4142135623730951}, "linghe.utils.add": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 11}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"linghe.utils.gather.triton_index_select": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1.7320508075688772}}, "df": 12}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 2}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.gather": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 9}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1.4142135623730951}}, "df": 5, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}, "linghe.quant": {"tf": 1}, "linghe.quant.block": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1.4142135623730951}, "linghe.quant.group": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1.4142135623730951}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1.4142135623730951}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 23}}}}, "k": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 8, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.scatter": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_index_select": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {"linghe.utils.silu": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}}, "df": 7}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"linghe.quant.channel": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}}, "df": 4, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}}, "df": 2}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"linghe.facade.norm": {"tf": 1}, "linghe.facade.norm.rms_norm": {"tf": 1.4142135623730951}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1.4142135623730951}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 10}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 5}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.rope": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1.4142135623730951}}, "df": 6}}, "w": {"docs": {"linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 5}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.rearange": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.reduce": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.transpose": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 47}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"0": {"1": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.dot": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1.4142135623730951}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"linghe.quant.block": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 7, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.blockwise_fp8_gemm": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 6}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 7}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2}}, "p": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 5}, "s": {"docs": {}, "df": 0, "k": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 3}}, "x": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 47}}}}, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 5}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 7}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 5}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 1}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"0": {"6": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 8}, "docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 1}, "1": {"2": {"8": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2, "e": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 9}}, "2": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}}, "df": 4}, "3": {"0": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 1}, "2": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "4": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 4}, "docs": {"linghe.facade.add.inplace_add": {"tf": 5.477225575051661}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 5.477225575051661}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 7.416198487095663}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 6.6332495807108}, "linghe.facade.norm.rms_norm": {"tf": 6.6332495807108}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 8.660254037844387}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 10.14889156509222}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 7.416198487095663}, "linghe.facade.transpose.transpose_dim01": {"tf": 3.1622776601683795}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 9.433981132056603}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 5.477225575051661}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 5.477225575051661}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 5.477225575051661}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 6.48074069840786}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 6.48074069840786}, "linghe.quant.block.triton_block_quant": {"tf": 5.0990195135927845}, "linghe.quant.channel.triton_row_quant": {"tf": 4.242640687119285}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 5.830951894845301}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 4.242640687119285}, "linghe.quant.group.triton_group_quant": {"tf": 6.164414002968976}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 3.7416573867739413}, "linghe.utils.add.triton_inplace_add": {"tf": 6.6332495807108}, "linghe.utils.dot.triton_dot": {"tf": 3.7416573867739413}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 5.656854249492381}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 6.324555320336759}, "linghe.utils.gather.triton_index_select": {"tf": 6.164414002968976}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 10.295630140987}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 8.246211251235321}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 8.717797887081348}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 8.18535277187245}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 10.583005244258363}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 3.7416573867739413}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 5.830951894845301}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 5.477225575051661}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 12.206555615733702}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 8.48528137423857}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 5.0990195135927845}, "linghe.utils.reduce.triton_abs_max": {"tf": 6.48074069840786}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 3.1622776601683795}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 4.242640687119285}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 5.0990195135927845}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 8.426149773176359}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 8.246211251235321}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 8.306623862918075}, "linghe.utils.scatter.triton_scatter_add": {"tf": 4.242640687119285}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 6.48074069840786}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 5.0990195135927845}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 7.483314773547883}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 6.48074069840786}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 4.69041575982343}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 8.12403840463596}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 6.164414002968976}, "linghe.utils.transpose.triton_transpose": {"tf": 7.681145747868608}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 5.0990195135927845}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 4.242640687119285}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 5.477225575051661}}, "df": 56, "x": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1.4142135623730951}}, "df": 31, "s": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}}, "df": 3}, "t": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.transpose.triton_batch_transpose": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1.4142135623730951}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1.4142135623730951}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1.4142135623730951}, "linghe.facade.norm.rms_norm": {"tf": 1.4142135623730951}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1.7320508075688772}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 2}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 2.23606797749979}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1.7320508075688772}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 2.23606797749979}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 2}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 2.23606797749979}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.7320508075688772}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 2}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1.7320508075688772}, "linghe.utils.transpose.triton_transpose": {"tf": 1}}, "df": 24}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}}, "df": 3, "s": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1.4142135623730951}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1.4142135623730951}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1.4142135623730951}, "linghe.facade.norm.rms_norm": {"tf": 1.4142135623730951}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1.7320508075688772}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 2}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 2}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1.7320508075688772}, "linghe.utils.add.triton_inplace_add": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 2.23606797749979}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 2}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 2.23606797749979}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.7320508075688772}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 2}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1.7320508075688772}, "linghe.utils.transpose.triton_transpose": {"tf": 1}}, "df": 23}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 12}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 1, "d": {"docs": {"linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 3}}}}}}}}}}, "y": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 2, "p": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 2}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1.4142135623730951}}, "df": 10, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}}, "df": 7}}}}}}, "d": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 3}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 13, "s": {"docs": {"linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 17}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"3": {"2": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "8": {"docs": {"linghe.quant.group.triton_group_quant": {"tf": 1}}, "df": 1}, "docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 14, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}}, "df": 5, "s": {"docs": {"linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}}, "df": 1}, "d": {"docs": {"linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 1}}}, "b": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 6}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"0": {"docs": {"linghe.utils.transpose.triton_transpose": {"tf": 1}}, "df": 1}, "1": {"docs": {"linghe.utils.transpose.triton_transpose": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_index_select": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 24}}, "r": {"docs": {}, "df": 0, "m": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1.4142135623730951}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.7320508075688772}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 1, "s": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 1}}}}, "e": {"4": {"docs": {}, "df": 0, "m": {"3": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"linghe.quant.group.triton_group_quant": {"tf": 1}}, "df": 1}}}, "docs": {}, "df": 0}}, "docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 8}}, "x": {"docs": {}, "df": 0, "p": {"docs": {"linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}}, "df": 4, "s": {"docs": {"linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 6, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}}, "df": 2}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {"linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 3, "s": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 1}, "k": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 1}, "v": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 5}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 2}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_abs_max": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 20, "s": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 5}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 5}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 2}}}, "q": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 7, "k": {"docs": {}, "df": 0, "v": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 3}}}, "k": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4}, "h": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}}, "df": 2, "m": {"docs": {"linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 4, "s": {"docs": {"linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 14}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2}}}}}, "w": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 3}}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 5}, "x": {"docs": {"linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 1}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}}, "df": 2}}}}}}}}}, "doc": {"root": {"0": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 11, "/": {"1": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "1": {"1": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}}, "df": 2}, "2": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}}, "df": 1}, "docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_transpose": {"tf": 1}}, "df": 8, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}}, "df": 1}}}}}}}, "2": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 12}, "3": {"2": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "4": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}}, "df": 1}, "docs": {"linghe": {"tf": 1.7320508075688772}, "linghe.facade": {"tf": 1.7320508075688772}, "linghe.facade.add": {"tf": 1.7320508075688772}, "linghe.facade.add.inplace_add": {"tf": 4.898979485566356}, "linghe.facade.fp32_gemm": {"tf": 1.7320508075688772}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 5}, "linghe.facade.hadamard_quant_linear": {"tf": 1.7320508075688772}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1.4142135623730951}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 5.0990195135927845}, "linghe.facade.loss": {"tf": 1.7320508075688772}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 5.744562646538029}, "linghe.facade.norm": {"tf": 1.7320508075688772}, "linghe.facade.norm.rms_norm": {"tf": 5.291502622129181}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 6.164414002968976}, "linghe.facade.rope": {"tf": 1.7320508075688772}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 7.483314773547883}, "linghe.facade.smooth_quant_linear": {"tf": 1.7320508075688772}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 5.0990195135927845}, "linghe.facade.transpose": {"tf": 1.7320508075688772}, "linghe.facade.transpose.transpose_dim01": {"tf": 4.47213595499958}, "linghe.gemm": {"tf": 1.7320508075688772}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 6.6332495807108}, "linghe.gemm.fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 4.898979485566356}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 5}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 4.898979485566356}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 5.385164807134504}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 5.291502622129181}, "linghe.quant": {"tf": 1.7320508075688772}, "linghe.quant.block": {"tf": 1.7320508075688772}, "linghe.quant.block.triton_block_quant": {"tf": 5.830951894845301}, "linghe.quant.channel": {"tf": 1.7320508075688772}, "linghe.quant.channel.triton_row_quant": {"tf": 4.898979485566356}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 4.898979485566356}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 5.477225575051661}, "linghe.quant.group": {"tf": 1.7320508075688772}, "linghe.quant.group.triton_group_quant": {"tf": 5.830951894845301}, "linghe.quant.hadamard": {"tf": 1.7320508075688772}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 5.830951894845301}, "linghe.quant.smooth": {"tf": 1.7320508075688772}, "linghe.utils": {"tf": 1.7320508075688772}, "linghe.utils.add": {"tf": 1.7320508075688772}, "linghe.utils.add.triton_inplace_add": {"tf": 5.477225575051661}, "linghe.utils.dot": {"tf": 1.7320508075688772}, "linghe.utils.dot.triton_dot": {"tf": 5.196152422706632}, "linghe.utils.gather": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 4.898979485566356}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 5.385164807134504}, "linghe.utils.gather.triton_index_select": {"tf": 5.291502622129181}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 6.6332495807108}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 7.14142842854285}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 6.6332495807108}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 6.928203230275509}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 8.18535277187245}, "linghe.utils.loss": {"tf": 1.7320508075688772}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 4.898979485566356}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 6}, "linghe.utils.norm": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 5.291502622129181}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 8.306623862918075}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 6.324555320336759}, "linghe.utils.rearange": {"tf": 1.7320508075688772}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 6.164414002968976}, "linghe.utils.reduce": {"tf": 1.7320508075688772}, "linghe.utils.reduce.triton_abs_max": {"tf": 6.082762530298219}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 4.47213595499958}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 5.196152422706632}, "linghe.utils.rope": {"tf": 1.7320508075688772}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 5.830951894845301}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 8}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 8.366600265340756}, "linghe.utils.scatter": {"tf": 1.7320508075688772}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 5.656854249492381}, "linghe.utils.scatter.triton_scatter_add": {"tf": 5.291502622129181}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 5.830951894845301}, "linghe.utils.silu": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 4.898979485566356}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 5.830951894845301}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 6.164414002968976}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 6.164414002968976}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 7.0710678118654755}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 7.211102550927978}, "linghe.utils.transpose": {"tf": 1.7320508075688772}, "linghe.utils.transpose.triton_transpose": {"tf": 5.291502622129181}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 5.385164807134504}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 4.47213595499958}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 5.291502622129181}}, "df": 90, "c": {"docs": {"linghe.facade.add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 2}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.quant.block": {"tf": 1}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}}, "df": 31, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"linghe.utils.add.triton_inplace_add": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.quant.block": {"tf": 1}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}}, "df": 26}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 3}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.dot.triton_dot": {"tf": 1}}, "df": 1, "d": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {"linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 1}}}, "a": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1.4142135623730951}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 14, "n": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 1, "t": {"docs": {"linghe.facade.add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.quant.block": {"tf": 1}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}}, "df": 26}, "d": {"docs": {"linghe.facade.add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.quant.block": {"tf": 1}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.4142135623730951}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 50}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.quant.block": {"tf": 1}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}}, "df": 26}}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1.4142135623730951}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 5}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 56}}}}}}}, "e": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}}, "df": 7}}}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1.4142135623730951}}, "df": 2, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 4}}}}, "@": {"docs": {}, "df": 0, "b": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}}, "df": 1}}, "s": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}}, "df": 3}, "l": {"docs": {}, "df": 0, "l": {"2": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}}, "df": 1}}}}, "docs": {}, "df": 0}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 2}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1.4142135623730951}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"linghe.facade.add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.quant.block": {"tf": 1}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}}, "df": 26}}}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"3": {"2": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "8": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}}, "df": 2}, "docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1.4142135623730951}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.7320508075688772}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 14, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 5}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4}}}}, "p": {"1": {"6": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "f": {"1": {"6": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}, "docs": {}, "df": 0}, "3": {"2": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 7}, "docs": {}, "df": 0}, "8": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 2}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 2.449489742783178}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.quant.block": {"tf": 1}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}}, "df": 26}}}}}, "e": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_index_select": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "t": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 1}}, "o": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1.4142135623730951}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 2}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.7320508075688772}}, "df": 6}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}}, "df": 1}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1.4142135623730951}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 12}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {"linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 6}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1.7320508075688772}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 3, "s": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 2}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_abs_max": {"tf": 1.7320508075688772}}, "df": 6}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 2}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1.7320508075688772}, "linghe.quant.channel.triton_row_quant": {"tf": 2}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 2}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 2}, "linghe.quant.group.triton_group_quant": {"tf": 1.7320508075688772}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 2}, "linghe.utils.gather.triton_index_select": {"tf": 2}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 2}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 2.449489742783178}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 2}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 2.449489742783178}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 2.6457513110645907}, "linghe.utils.reduce.triton_abs_max": {"tf": 2}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 2.449489742783178}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 2.449489742783178}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 2}}, "df": 21, "d": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 4}, "s": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 2}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}}, "df": 8}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 3}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {"linghe.utils.dot.triton_dot": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 7}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"linghe.utils.scatter.triton_scatter_add": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {"linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 3, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"linghe.facade.add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 2}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.quant.block": {"tf": 1}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1.7320508075688772}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.7320508075688772}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}}, "df": 29, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.quant.group.triton_group_quant": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1.4142135623730951}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 2.449489742783178}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 2.23606797749979}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 2.449489742783178}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 13}}}}, "s": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 7}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 2}}, "df": 2}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}}, "df": 1}, "q": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 1}, "k": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 1}, "v": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 8, "s": {"docs": {"linghe.facade.add": {"tf": 1}, "linghe.facade.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear": {"tf": 1}, "linghe.facade.loss": {"tf": 1}, "linghe.facade.norm": {"tf": 1}, "linghe.facade.rope": {"tf": 1}, "linghe.facade.smooth_quant_linear": {"tf": 1}, "linghe.facade.transpose": {"tf": 1}, "linghe.gemm.blockwise_fp8_gemm": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm": {"tf": 1}, "linghe.quant.block": {"tf": 1}, "linghe.quant.channel": {"tf": 1}, "linghe.quant.group": {"tf": 1}, "linghe.quant.hadamard": {"tf": 1}, "linghe.quant.smooth": {"tf": 1}, "linghe.utils.add": {"tf": 1}, "linghe.utils.dot": {"tf": 1}, "linghe.utils.gather": {"tf": 1}, "linghe.utils.loss": {"tf": 1}, "linghe.utils.rearange": {"tf": 1}, "linghe.utils.reduce": {"tf": 1}, "linghe.utils.rope": {"tf": 1}, "linghe.utils.scatter": {"tf": 1}, "linghe.utils.silu": {"tf": 1}, "linghe.utils.transpose": {"tf": 1}}, "df": 26}}, "n": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 20, "p": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}}, "df": 26, "s": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}}, "df": 2}}}}, "t": {"6": {"4": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 2.23606797749979}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 3}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1.4142135623730951}}, "df": 11}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 2}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {"linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}}}}, "f": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.4142135623730951}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 8}, "s": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_abs_max": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 14}, "d": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1.7320508075688772}}, "df": 5}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 2.449489742783178}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 2}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 8, "@": {"docs": {}, "df": 0, "w": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 1, "o": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1.7320508075688772}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.7320508075688772}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 26, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 9, "s": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 2.449489742783178}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 2.449489742783178}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 2.23606797749979}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 2.23606797749979}}, "df": 7}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "k": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1.4142135623730951}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 2}, "linghe.facade.norm.rms_norm": {"tf": 1.4142135623730951}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.facade.transpose.transpose_dim01": {"tf": 1.7320508075688772}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 2.449489742783178}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 2}, "linghe.quant.block.triton_block_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1.4142135623730951}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 2}, "linghe.utils.add.triton_inplace_add": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 2.23606797749979}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.4142135623730951}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1.7320508075688772}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1.7320508075688772}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1.7320508075688772}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1.7320508075688772}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1.7320508075688772}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 2.23606797749979}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 2.6457513110645907}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.7320508075688772}, "linghe.utils.transpose.triton_transpose": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1.4142135623730951}}, "df": 46, "s": {"docs": {"linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.7320508075688772}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 15, "d": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 2}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.7320508075688772}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 2}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 2}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 2}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 2}, "linghe.utils.transpose.triton_transpose": {"tf": 1}}, "df": 11}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.4142135623730951}}, "df": 4}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 6}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 7, "n": {"docs": {"linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 3}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}}, "df": 1}}}, "x": {"docs": {"linghe.facade.add.inplace_add": {"tf": 2}, "linghe.facade.norm.rms_norm": {"tf": 1.4142135623730951}, "linghe.facade.transpose.transpose_dim01": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.quant.block.triton_block_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_row_quant": {"tf": 2.23606797749979}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1.7320508075688772}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 2.449489742783178}, "linghe.quant.group.triton_group_quant": {"tf": 1.4142135623730951}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 2.6457513110645907}, "linghe.utils.add.triton_inplace_add": {"tf": 2.23606797749979}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 2}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_abs_max": {"tf": 2}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1.7320508075688772}}, "df": 34, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"linghe.utils.transpose.triton_batch_transpose": {"tf": 1}}, "df": 1}}, "*": {"docs": {}, "df": 0, "y": {"docs": {"linghe.utils.dot.triton_dot": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}}, "df": 3}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 2}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 18}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.7320508075688772}}, "df": 1, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1.4142135623730951}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.norm.rms_norm": {"tf": 1.7320508075688772}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1.7320508075688772}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 2}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 2}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 2}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 22, "s": {"docs": {"linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 18}}}}}}}, "m": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "x": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}}, "df": 3}, "n": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1.4142135623730951}}, "df": 1}}, "o": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}}, "df": 7}, "d": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}}, "df": 2}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2}}, "p": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1.7320508075688772}}, "df": 5}, "y": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 2}, "x": {"docs": {"linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 2}}, "df": 2}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"linghe.utils.dot.triton_dot": {"tf": 1}}, "df": 1}, "e": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 1, "s": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}}, "df": 3}}}}}}}, "]": {"docs": {}, "df": 0, "*": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.transpose.triton_batch_transpose": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}}, "df": 4}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 4, "s": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 2.449489742783178}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}}, "df": 7, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 2.23606797749979}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.4142135623730951}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 12}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1.7320508075688772}}, "df": 2, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 3}}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 3}}}}}}, "b": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 2}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 2.449489742783178}}, "df": 8, "e": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 6, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}}, "df": 1}}}}}, "f": {"1": {"6": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"1": {"6": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}, "s": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_index_select": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 2}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 2.449489742783178}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 2.23606797749979}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1.7320508075688772}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 11, "*": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "k": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 7}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 4, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 1, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}}, "df": 1, "d": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1.4142135623730951}, "linghe.utils.add.triton_inplace_add": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1}}, "df": 2, "d": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 13}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.quant.group.triton_group_quant": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 4, "s": {"docs": {"linghe.facade.add.inplace_add": {"tf": 1}, "linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_transpose": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 54}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.7320508075688772}, "linghe.utils.dot.triton_dot": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 8}, "d": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_row_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1.4142135623730951}, "linghe.quant.group.triton_group_quant": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}}, "df": 15, "u": {"docs": {}, "df": 0, "p": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4}}, "w": {"docs": {"linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 2}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1.7320508075688772}}, "df": 6, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}}, "df": 7}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1.7320508075688772}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 2}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 2}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.7320508075688772}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}}, "df": 9, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_index_select": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1.4142135623730951}}, "df": 15, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1.4142135623730951}, "linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 2.23606797749979}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 2.449489742783178}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.utils.dot.triton_dot": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 2.6457513110645907}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.7320508075688772}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1.7320508075688772}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 2.6457513110645907}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 2.6457513110645907}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 28, "s": {"docs": {"linghe.utils.scatter.triton_aligned_scatter_add": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {"linghe.facade.fp32_gemm.fp32_gemm": {"tf": 1}, "linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1.7320508075688772}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.7320508075688772}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.4142135623730951}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_backward": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm_for_update": {"tf": 1.4142135623730951}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 2}, "linghe.utils.dot.triton_dot": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 2}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_index_select": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 2}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 3}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.7320508075688772}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 2}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 2.6457513110645907}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 2}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 2}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 2.449489742783178}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 2.6457513110645907}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1.4142135623730951}}, "df": 40}, "n": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 3, "e": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}}, "df": 3}, "l": {"docs": {}, "df": 0, "y": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}}, "df": 1}, "d": {"docs": {"linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_abs_max": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 2.23606797749979}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1.4142135623730951}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 14, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.utils.scatter.triton_scatter_add": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 2.23606797749979}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 2.449489742783178}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 2.449489742783178}}, "df": 4, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1.7320508075688772}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 2.23606797749979}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 2}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 2.23606797749979}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 2.23606797749979}}, "df": 10, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 3}}}}}}}}}}}, "t": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 6, "e": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}}, "df": 1}}, "n": {"docs": {"linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}}, "df": 8, "e": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}}, "df": 3}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_transpose_and_pad": {"tf": 1}}, "df": 2}}}, "]": {"docs": {}, "df": 0, "*": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.transpose.triton_batch_transpose": {"tf": 1}}, "df": 1}}}}}}}}}, "h": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 2.23606797749979}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 2.23606797749979}}, "df": 2, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 2}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 2}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 2.449489742783178}}, "df": 6, "s": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.7320508075688772}}, "df": 4}}}}, "m": {"docs": {"linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1.7320508075688772}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "s": {"docs": {"linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 1}}, "q": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.7320508075688772}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 2.23606797749979}}, "df": 11, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear": {"tf": 1}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 2}, "linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 2.6457513110645907}, "linghe.utils.reduce.triton_abs_max": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1.7320508075688772}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}}, "df": 17}}}}}, "e": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}}, "df": 7, "d": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.channel.triton_row_quant": {"tf": 1}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.quant.channel.triton_transpose_row_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}, "linghe.quant.hadamard.triton_hadamard_quant": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 2}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 2}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}}, "df": 15}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 3}}}}, "k": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4, "v": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1.7320508075688772}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 2.449489742783178}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1.7320508075688772}}, "df": 3, "q": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 1}}}, "/": {"docs": {}, "df": 0, "k": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2, "/": {"docs": {}, "df": 0, "v": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1.4142135623730951}}, "df": 2}}}}, "o": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.hadamard_quant_linear.HadamardQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.facade.smooth_quant_linear.SmoothQuantLinear.__init__": {"tf": 1.4142135623730951}, "linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1.4142135623730951}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "m": {"0": {"docs": {"linghe.utils.transpose.triton_transpose": {"tf": 1.4142135623730951}}, "df": 1}, "1": {"docs": {"linghe.utils.transpose.triton_transpose": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 2}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 2.23606797749979}, "linghe.quant.channel.triton_tokenwise_row_quant": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 2}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 2}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 2.449489742783178}, "linghe.utils.rearange.triton_split_and_cat": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 2.6457513110645907}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1.7320508075688772}, "linghe.utils.transpose.triton_transpose": {"tf": 1.4142135623730951}}, "df": 15, "s": {"docs": {"linghe.facade.transpose.transpose_dim01": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}}, "df": 1, "t": {"docs": {"linghe.utils.dot.triton_dot": {"tf": 1}}, "df": 1}}, "w": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm_for_update": {"tf": 1}, "linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}}, "df": 3}, "y": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1.7320508075688772}}, "df": 2}}}, "q": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "v": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 1}}, "w": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 1}}, "k": {"docs": {}, "df": 0, "w": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 1}}, "x": {"docs": {"linghe.utils.silu.triton_weighted_silu_backward": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_backward": {"tf": 2}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 2}}, "df": 3}}, "e": {"4": {"docs": {}, "df": 0, "m": {"3": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"linghe.quant.block.triton_block_quant": {"tf": 1}, "linghe.quant.group.triton_group_quant": {"tf": 1}}, "df": 2}}}, "docs": {}, "df": 0}}, "docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}}}, "p": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.facade.norm.rms_norm": {"tf": 1}, "linghe.facade.norm.group_rms_norm_gate": {"tf": 1}, "linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_forward": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 7}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"linghe.utils.add.triton_inplace_add": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1.4142135623730951}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 4}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {"linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1.7320508075688772}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.silu.triton_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1.4142135623730951}}, "df": 9, "s": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_permute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 2.449489742783178}, "linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1.4142135623730951}, "linghe.utils.gather.triton_smooth_permute_with_mask_map": {"tf": 2}, "linghe.utils.scatter.triton_unpermute_with_mask_map": {"tf": 1.4142135623730951}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1.4142135623730951}}, "df": 9, "*": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "k": {"docs": {"linghe.utils.gather.triton_smooth_weighted_permute_with_indices": {"tf": 1}, "linghe.utils.gather.triton_smooth_permute_with_indices": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "l": {"2": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1.7320508075688772}, "linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 4}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}, "w": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 1, "s": {"docs": {"linghe.facade.loss.softmax_cross_entropy": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_forward": {"tf": 1.4142135623730951}, "linghe.utils.loss.triton_softmax_cross_entropy_backward": {"tf": 1}}, "df": 3}}}}, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1.7320508075688772}}, "df": 2, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"linghe.facade.norm.group_rms_norm_gate": {"tf": 1.7320508075688772}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 2.23606797749979}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"linghe.gemm.channelwise_fp8_gemm.triton_scaled_mm": {"tf": 1}, "linghe.gemm.fp32_gemm.triton_fp32_gemm": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"linghe.facade.smooth_quant_linear.SmoothQuantLinear": {"tf": 1}, "linghe.utils.norm.triton_group_rms_norm_gate_forward": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"linghe.utils.gather.triton_batch_transpose_smooth_permute_with_indices": {"tf": 1}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_forward": {"tf": 1}, "linghe.utils.silu.triton_batch_weighted_silu_and_block_quant_backward": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose": {"tf": 1.4142135623730951}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.gather.triton_index_select": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {}, "df": 0, "y": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 3, "/": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"linghe.gemm.fp32_gemm.triton_scaled_fp32_gemm": {"tf": 1.4142135623730951}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 4}, "v": {"docs": {"linghe.utils.rope.triton_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 2}}, "v": {"docs": {"linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map": {"tf": 1}, "linghe.utils.gather.triton_make_row_id_map_and_indices": {"tf": 1}, "linghe.utils.norm.triton_rms_norm_and_block_quant_forward": {"tf": 1}, "linghe.utils.reduce.triton_abs_max": {"tf": 1.4142135623730951}, "linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}, "linghe.utils.reduce.triton_batch_sum_with_ord": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.transpose.triton_batch_transpose_and_pad": {"tf": 1}}, "df": 9, "s": {"docs": {"linghe.utils.gather.triton_make_row_id_map": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "o": {"docs": {"linghe.facade.rope.qk_norm_half_rope": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_forward": {"tf": 1}, "linghe.utils.rope.triton_qk_norm_and_half_rope_backward": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"linghe.utils.dot.triton_dot": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"linghe.utils.scatter.triton_scatter_add": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"linghe.utils.scatter.triton_scatter_add": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}}, "df": 1, "s": {"docs": {"linghe.utils.reduce.triton_batch_count_zero": {"tf": 1}}, "df": 1}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();